container NetworkSetup : using = "units;geometries;SourceData;Classifications;SourceData/RegionalUnits;"
{	
	container Settlements_Per_Continent :=
		for_each_ne(
			Continents/name
			, 'selSettlements_Per_Continent_T(SourceData/Settlements/all_Settlements,'+quote(Continents/name)+')'
		);
		
	container GridPoints_Per_Continent := 
		for_each_ne(
			Continents/name
			, 'selGridpoints_Per_Continent_T(SourceData/Population/LandCells,'+quote(Continents/name)+', SourceData/RegionalUnits/Countries)'
		);
		
	container Per_Continent :=
		for_each_ne(
			Continents/name
			,'Call_CreateNetwork_T(
				'+quote(Continents/label)+
				',Settlements_Per_Continent/'+Continents/name+'/Select'    //orgs
				',GridPoints_Per_Continent/'+Continents/name+'/Select'     //dests
				',GridPoints_Per_Continent/'+Continents/name+'/sep_units'  //dests
			')'
		);
	
	
	Template selGridpoints_Per_Continent_T
	{
		unit<uint64>      inUnit;
		parameter<string> Continent_name;
		unit<uint32>      inCountries;
		//
		unit<uint64> Select_ui64 := ='select_with_attr_by_cond(inUnit,  inUnit/continent_rel == Continents/v/'+Continent_name+')';
		
		unit<uint32> Select:= range(uint32, 0, uint32(#Select_ui64)), dialogdata = "centroid", dialogtype = "map" 
		{
			attribute<ipoint>    org_rel     := ='select_data(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/org_rel)';
			attribute<WGS84>     centroid    := ='select_data(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/centroid)';
			attribute<Geometries/WebMercator> centroid_wm:= convert(point(PointCol(centroid), PointRow(centroid))[WGS84], Geometries/WebMercator);
			attribute<float32>   population  := ='select_data(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/population)[float32]';
			attribute<sep_units> sepunit_rel := point_in_polygon(centroid, sep_units/geometry_LL);
			attribute<Countries> country_rel := sep_units/Nr_OrgEntity[sepunit_rel];
			
			parameter<string> refname:= 'grids_1km';
		}
		unit<uint32> Countries := ='select_with_attr_by_cond(inCountries, inCountries/Continents_rel == Continents/v/'+Continent_name+')' 
		{
			attribute<string> Label           := ='select_data(., inCountries/continents_rel == Continents/v/'+Continent_name+', inCountries/Label)';
			attribute<string> ZoneId		  := ='select_data(., inCountries/continents_rel == Continents/v/'+Continent_name+', inCountries/ZoneId)';
			attribute<WGS84>  Geometry (poly) := ='select_data(., inCountries/continents_rel == Continents/v/'+Continent_name+', inCountries/Geometry)';
			unit<uint32>      border_points   := sequence2points(geometry) 
			{
				attribute<dpoint> points_x1000 := point[dpoint] * point(1000d, 1000d, dpoint);
			}
			
			attribute<ipoint> iGeom (poly)    := points2sequence_pso(border_points/points_x1000, border_points/sequence_rel, border_points/ordinal)[ipoint];
		}
		unit<uint32> sep_units:= split_polygon(Countries/iGeom) 
		{
			unit<uint32>        border_points      := sequence2points(geometry) {attribute<WGS84> points_div := (point[dpoint] / point(1000d, 1000d, dpoint))[WGS84];}
			attribute<WGS84>    geometry_LL (poly) := points2sequence_pso(border_points/points_div, border_points/sequence_rel, border_points/ordinal);
			attribute<Countries>country_rel		   := Nr_OrgEntity;
		}
		
		// establish islands here (make connections to right, right/bottom, bottom)
		//unit<uint32> 
		
			//collect_by_cond(sel_LandCells, big_raster/GridData >= 0d && IsDefined(big_raster/country_rel), big_raster/GridData)

	}
	Template selSettlements_Per_Continent_T
	{
		unit<uint32> inUnit;
		parameter<string> Continent_name;
		//
		unit<uint32> Select := ='select_with_attr_by_cond(inUnit,  inUnit/continent_rel == Continents/v/'+Continent_name+')', dialogdata = "geometry_LL", dialogtype = "map"  
		{
			attribute<WGS84>       geometry_LL (poly) := ='select_data(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/geometry_LL)';
			attribute<WGS84>       centroid           := ='select_data(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/centroid)';
			attribute<WebMercator> centroid_wm        := convert(point(PointCol(centroid), PointRow(centroid))[WGS84], WebMercator);
			attribute<float32>     population         := ='select_data(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/population)';
			attribute<string>      Label              := ='select_data(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/Label)';
			attribute<Countries>   country_rel        := point_in_polygon(centroid, Countries/Geometry);
			
			parameter<string> refname:= 'all_settlements';
			//collect_by_cond(sel_LandCells, big_raster/GridData >= 0d && IsDefined(big_raster/country_rel), big_raster/GridData)
		}
	}
	Template Call_CreateNetwork_T
	{
		parameter<string> Continent_name;
		unit<uint32>      Org;
		unit<uint32>      Dest;
		unit<uint32>	  RoadSelDomain;
		///
		unit<uint32>      RoadDomain_src := ='SourceData/Infrastructure/OSM/Per_Continent/'+Continent_name+'';
		
		parameter<string> OrgName:= Org/refname;
		parameter<string> DestName:= Dest/refname;
		
		
		container NetwerkSpec :=
			Templates/CreateNetwork_T(
				  org
				, dest
				, RoadDomain_src
			);
			
		parameter<bool> Store_Network1:= True, explicitsuppliers = "NetwerkSpec/CreateInitialWorkingNetwork/LinkSet_Write;";
		parameter<bool> Store_Network2:= True, explicitsuppliers = "NetwerkSpec/CreateMoreEfficientNetwork/FinalNodeSet_Write;NetwerkSpec/CreateMoreEfficientNetwork/FinalLinkSet_Write;";
		
	}
}
