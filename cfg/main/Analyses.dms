container Analyses: Using = "Units;Classifications;geometries;sourcedata;SourceData/RegionalUnits" 
{  
	container Settlements_Per_Continent :=
	 for_each_ne(
		Continents/name
		, 'NetworkSetup/selSettlements_Per_Continent_T(SourceData/Settlements/all_settlements,'+quote(Continents/name)+')'
	);

	container Obtain_Settlement_Hierarchies:= 
		for_each_ne(
			Continents/Name
			,'Settlement_Hierarchy_T('+quote(Continents/label)+
				', Settlements_Per_Continent/'+Continents/name+'/Select'    //orgs
				', Settlements_Per_Continent/'+Continents/name+'/Select'  
				', NetworkSetup/Per_Continent/'+Continents/Name+'/NetwerkSpec/CreateMoreEfficientNetwork'
			')'
		);
	
	container Create_Centres_Catchments 
	{
		attribute<string> eval (Continents):= 
				', Obtain_Settlement_Hierarchies/'+Continents/name+'/Hierarchies_ReadOnly'+
				', NetworkSetup/GridPoints_Per_Continent/'+Continents/name+'/select' +
				', NetworkSetup/GridPoints_Per_Continent/'+Continents/name+'/Countries' +
				', NetworkSetup/GridPoints_Per_Continent/'+Continents/name+'/sep_units' +
				', NetworkSetup/Per_Continent/'+Continents/Name+'/NetwerkSpec/CreateMoreEfficientNetwork';
		
		container m10        := for_each_ne(Continents/Name, 'Prepare_Catchments_T('+quote(Continents/label)+ eval + ', 2[Centres_Thresholds])');
		container m10_ex_fua := for_each_ne(Continents/Name, 'Prepare_Catchments_T('+quote(Continents/label)+ eval + ', 2[Centres_Thresholds],0f,true)');
		container m15        := for_each_ne(Continents/Name, 'Prepare_Catchments_T('+quote(Continents/label)+ eval + ', 3[Centres_Thresholds])');
		container m20        := for_each_ne(Continents/Name, 'Prepare_Catchments_T('+quote(Continents/label)+ eval + ', 4[Centres_Thresholds])');
		container m25        := for_each_ne(Continents/Name, 'Prepare_Catchments_T('+quote(Continents/label)+ eval + ', 5[Centres_Thresholds])');
		container m30        := for_each_ne(Continents/Name, 'Prepare_Catchments_T('+quote(Continents/label)+ eval + ', 6[Centres_Thresholds])');
		container m45        := for_each_ne(Continents/Name, 'Prepare_Catchments_T('+quote(Continents/label)+ eval + ', 9[Centres_Thresholds])');
		container m30_50k    := for_each_ne(Continents/Name, 'Prepare_Catchments_T('+quote(Continents/label)+ eval + ', 6[Centres_Thresholds], 50000[float32])');
	}
	
	#include<Functional_Rural_Areas.dms>
	#include<Accessibility.dms>
	#include<Collect_Results.dms>
	
	Template Prepare_Catchments_T 
	{
		parameter<string>     Continent_name;
		unit<uint32>          inSettlements;
		unit<uint32>          inGrids;
		unit<uint32>          inCountries;
		unit<uint32>          in_sep_units;
		container             NetwerkSpec;
		parameter<Centres_Thresholds> inThreshold;
		parameter<float32>    minPop:= 0f;
		parameter<bool>       FUA_exclusion := False;
		
		unit<uint32> FinalLinkSet := NetwerkSpec/FinalLinkSet_Read;
		unit<uint32> FinalNodeSet := NetwerkSpec/FinalNodeSet_Read;
	
		unit<uint32> SelectedSettlements:= = 'select_with_org_rel(bool(inSettlements/'+Centres_Thresholds/name[inThreshold]+') && float32(inSettlements/Pop) >= minPop && (!FUA_exclusion || !inSettlements/inFUA))'
		{
			attribute<BaseProjection> Geometry    := inSettlements/point[org_rel];
			attribute<string>         Label       := inSettlements/Label[org_rel];
			attribute<WorldMollweide> centroid_mw := convert(Geometry, WorldMollweide);
			attribute<FinalNodeSet>   NodeId      := inSettlements/NodeId[org_rel];
			attribute<float32>        Pop         := float32(inSettlements/Pop[org_rel]);
			attribute<uint32>         Type        := uint32(inSettlements/Type[org_rel]);
			attribute<inCountries> 	  Country_rel := point_in_polygon(Geometry, inCountries/Geometry_LL);
			// attribute<RelevantSettlements> rs_id  := point_in_polygon(Geometry, RelevantSettlements/Geometry);
		}
		
		unit<uint32> grids_fua_check:= inGrids {attribute<bool> InFUA:= isdefined(point_in_polygon(inGrids/centroid, SourceData/RegionalUnits/FUAs/Geometry));}
		
		attribute<BaseProjection>  inGrids_centroid_wgs    (inGrids) := inGrids/centroid;
		attribute<WebMercator>     inGrids_centroid_wm     (inGrids) := convert(inGrids_centroid_wgs, WebMercator);
		
		attribute<FinalNodeSet> Closest_node        (inGrids) := connect(FinalNodeSet/geometry, inGrids_centroid_wm);
		attribute<bool>         Close_enough        (inGrids) := dist(inGrids_centroid_wm, FinalNodeSet/geometry[Closest_node]) < 100d;
		attribute<FinalNodeSet> Dest_NodeId         (inGrids) := Close_enough ? Closest_node : const(0 / 0, inGrids, FinalNodeSet);
		
		unit<uint32> Unconnected_Grids:= select_with_org_rel(IsNull(Dest_NodeId) && (!FUA_exclusion || !grids_fua_check/InFUA))
		{
			attribute<WebMercator>      Geometry     := inGrids_centroid_wm[org_rel];
			attribute<BaseProjection>   geometry_LL  := inGrids/centroid[org_rel];
			attribute<inCountries>      Country_rel  := inGrids/Country_rel[org_rel];
			attribute<in_sep_units>     Sep_unit_rel := inGrids/sepunit_rel[org_rel];
			attribute<float32>          Pop          := inGrids/population[org_rel];
		}
		
		unit<uint32> Connected_Grids:= select_with_org_rel(IsDefined(Dest_NodeId) && (!FUA_exclusion || !grids_fua_check/InFUA)) 
		{
			attribute<WebMercator>      Geometry     := inGrids_centroid_wm[org_rel];
			attribute<BaseProjection>   geometry_LL  := inGrids/centroid[org_rel];
			attribute<FinalNodeSet>     NodeId       := Dest_NodeId[org_rel];
			attribute<float32>          Pop          := inGrids/population[org_rel];
			attribute<inCountries>      Country_rel  := inGrids/Country_rel[org_rel];
			attribute<in_sep_units>     Sep_unit_rel := inGrids/sepunit_rel[org_rel];
		}
		
		Container Country_Catchments:= 
			for_each_ne(
				inCountries/ZoneId
				, 'Create_Country_Catchments_T('+string(id(inCountries))+', True)'
			) 
		{
			container gen 
			{
				attribute<bool> button (inCountries):= ='union_data(inCountries, '+asitemlist('Country_Catchments/'+inCountries/ZoneId+'/store_catchment')+')';
			}
		}
		
		Template Create_Country_Catchments_T 
		{
			parameter<inCountries> inCountry;
			///
			parameter<bool>        Use_Grav_spec := False;
			parameter<bool>        Single_Centroid:= False;
			
			unit<uint32> sep_Country_Units := select_with_org_rel(in_sep_units/country_rel = inCountry) 
			{
				attribute<BaseProjection>     geometry (poly)    := in_sep_units/Geometry[org_rel];
				attribute<string>             ZoneId             := in_sep_units/ZoneId[org_rel];
				attribute<bool>               any_connection     := pcount(Country_Connected_Grids/scu_rel) > 0;
				attribute<bool>               any_grid           := pcount(Country_Unconnected_Grids/scu_rel) > 0 || any_connection;
			}
			unit<uint32> Rel_sep_country_units := select_with_org_rel(sep_Country_Units/any_grid)
			{
				attribute<string>             ZoneId             := sep_Country_Units/ZoneId[org_rel];
			}
			unit<uint32> Country_Settlements := select_with_org_rel(SelectedSettlements/Country_rel = inCountry) 
			{
				attribute<BaseProjection>     Geometry    := SelectedSettlements/Geometry[org_rel];
				attribute<WorldMollweide>     Geometry_mw := SelectedSettlements/centroid_mw[org_rel];
				attribute<WebMercator>        Geometry_wm := Geometry_mw[WebMercator];
				attribute<string>             Label       := SelectedSettlements/Label[org_rel];
				attribute<float32>            Pop         := SelectedSettlements/Pop[org_rel];
				attribute<FinalNodeSet>       NodeId      := SelectedSettlements/NodeId[org_rel];
				attribute<BaseProjection>     Poly_LL (poly) := rjoin(Label, Settlements/all_settlements/Label, Settlements/all_settlements/geometry_LL);
				attribute<Settlements/all_settlements> un_sett_rel:= rlookup(Label, Settlements/all_settlements/Label);
				attribute<.>                  SettId     := id(.);
				
			}
			
			unit<uint32> Country_Unconnected_Grids := select_with_org_rel(Unconnected_Grids/country_rel = inCountry) 
			{
				attribute<WebMercator>        Geometry    := Unconnected_Grids/Geometry[org_rel];
				attribute<WorldMollweide>     Geometry_mw := (Unconnected_Grids/Geometry[org_rel])[WorldMollweide];
				attribute<BaseProjection>     geometry_LL := Unconnected_Grids/geometry_LL[org_rel];
				attribute<sep_Country_Units>  scu_rel     := rlookup(Unconnected_Grids/sep_unit_rel[org_rel], sep_Country_Units/org_rel);
				attribute<float32>            Pop         := Unconnected_Grids/Pop[org_rel];
				attribute<bool>               conn_scu    := sep_Country_Units/any_connection[scu_rel];
				//attribute<Country_Connected_Grids> 
			}
			
			unit<uint32> Country_Connected_Grids := select_with_org_rel(Connected_Grids/country_rel = inCountry) 
			{
				attribute<WebMercator>        Geometry    := Connected_Grids/Geometry[org_rel];
				attribute<WorldMollweide>     Geometry_mw := (Connected_Grids/Geometry[org_rel])[WorldMollweide];
				attribute<BaseProjection>     geometry_LL := Connected_Grids/geometry_LL[org_rel];
				attribute<sep_Country_Units>  scu_rel     := rlookup(Connected_Grids/sep_unit_rel[org_rel], sep_Country_Units/org_rel);
				attribute<float32>            Pop         := Connected_Grids/Pop[org_rel];
				attribute<FinalNodeSet>       NodeId      := Connected_Grids/NodeId[org_rel];
				attribute<Country_Settlements>SettId      := point_in_polygon(geometry_LL, Country_Settlements/Poly_LL);
				
				//unit<uint32> make_polygons:= union_unit(Country_Connected_Grids,Country_Connected_Grids,Country_Connected_Grids,Country_Connected_Grids) {
				//	attribute<Geometries/WorldMollweide> point:= union_data(., 
				//}	
			}
			
			parameter<string> OriginPoints_source:= Single_Centroid || Use_Grav_spec ? 'Country_Settlements' : 'Country_Connected_Grids';
			
			unit<uint32> GridPoints_in_settlements:= = 'select_with_attr_by_cond('+OriginPoints_source+', isdefined('+OriginPoints_source+'/SettId))';

			//parameter<bool>			Abs_Size_filter:= True;
			parameter<float32>   Grav_func:= -2f;
			parameter<bool>      Identify_exclaves:= True;
			
			//settlement node definition (either all grid cells in a settlement or the centroid; not used here yeta
			/*unit<uint32> SelDestinationPoints: expr = "subset(IsDefined(rlookup(DestinationPoints/RelSettRef, SelectedOutputs/rs_id)) && (!Use_Grav_spec || DestinationPoints/Centroid_snap))" {
				attribute<Geography/LambertEA> Geometry: expr = "DestinationPoints/Point[Nr_OrgEntity]";
				attribute<NodeSet> NodeRef: expr = "DestinationPoints/NodeRef[Nr_OrgEntity]";
				attribute<RelevantSettlements> RelSettRef: expr = "DestinationPoints/RelSettRef[Nr_OrgEntity]";
				attribute<float32> 	Pop:= DestinationPoints/Pop[Nr_OrgEntity];
			}*/
			
			container Gravity_spec 
			{
				unit<uint64> Create_Matrix := impedance_matrix_od64('bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);limit(OrgZone_max_mass,DstZone_mass);od:OrgZone_rel,DstZone_rel,impedance'
						, FinalLinkSet/impedance
						, FinalLinkSet/F1
						, FinalLinkSet/F2
						, !FinalLinkSet/IsOneDirection
						, Country_Connected_Grids/NodeId
						, GridPoints_in_settlements/NodeId, 5d, 1d) 
				{
					attribute<float32>             pull      := Country_Settlements/Pop[GridPoints_in_settlements/SettId[DstZone_rel]] * (max_elem(Impedance[float32], 0.01f)^Grav_func);
					attribute<Country_Settlements> destpoint := GridPoints_in_settlements/SettId[DstZone_rel];
				}
				
				attribute<Create_Matrix>       max_pull_id            (Country_Connected_Grids) := max_index(Create_Matrix/pull, Create_Matrix/OrgZone_rel);
				attribute<Country_Settlements> proto_dependent_point  (Country_Connected_Grids) := Create_Matrix/destpoint[max_pull_id];
				attribute<float64>             tt                     (Country_Connected_Grids) := Create_Matrix/Impedance[max_pull_id];
				
				unit<uint32> with_values := select_with_org_rel(isdefined(proto_dependent_point)) 
				{
					attribute<WebMercator>         Geometry  := Country_Connected_Grids/Geometry[org_rel]; 
					attribute<Country_Settlements> depval    := proto_dependent_point[org_rel];
				}
				unit<uint32> without_values := select_with_org_rel(isnull(proto_dependent_point))
				{
					attribute<WebMercator>         Geometry  := Country_Connected_Grids/Geometry[org_rel]; 
					attribute<Country_Settlements> depval    := with_values/depval[connect(with_values/Geometry, Geometry)];
				}
				attribute<without_values>          wv_rel          (Country_Connected_Grids) := invert(without_values/org_rel);
				attribute<Country_Settlements>     dependent_point (Country_Connected_Grids) := #with_values > 0 ? makedefined(proto_dependent_point, without_values/depval[wv_rel]) : 0;
			}

			container Find_Only_Closest 
			{
				attribute<s_f> Closest_TravelTime (FinalNodeSet) := 
					impedance_table(
						'bidirectional(link_flag);startPoint(Node_rel);node:TraceBack'
						, FinalLinkSet/impedance
						, FinalLinkSet/F1
						, FinalLinkSet/F2
						, !FinalLinkSet/IsOneDirection
						//, Country_Settlements/NodeId
						, GridPoints_in_settlements/NodeId 
					);
					
				attribute<Country_Settlements>  service_area                     (FinalNodeSet) := GridPoints_in_settlements/SettId[rlookup(service_area(FinalLinkSet/F1, FinalLinkSet/F2, Closest_TravelTime/TraceBack), GridPoints_in_settlements/NodeId)];				
				attribute<Country_Settlements>  proto_dependent_point (Country_Connected_Grids) := service_area[Country_Connected_Grids/NodeId];
				
				unit<uint32> with_values:= select_with_org_rel(isdefined(proto_dependent_point)) 
				{
					attribute<WebMercator>         Geometry := Country_Connected_Grids/Geometry[org_rel]; 
					attribute<Country_Settlements> depval   := proto_dependent_point[org_rel];
				}
				
				unit<uint32> without_values:= select_with_org_rel(isnull(proto_dependent_point)) 
				{
					attribute<WebMercator>         Geometry := Country_Connected_Grids/Geometry[org_rel]; 
					attribute<Country_Settlements> depval   := with_values/depval[connect(with_values/Geometry, Geometry)];
				}
				attribute<without_values>          wv_rel          (Country_Connected_Grids) := invert(without_values/org_rel);
				attribute<Country_Settlements>     dependent_point (Country_Connected_Grids) := #with_values > 0 ? makedefined(proto_dependent_point, without_values/depval[wv_rel]) : 0;
			}
			/*container Gravity_spec {
				unit<uint64> Create_Matrix:= dijkstra_m64('bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);limit(OrgZone_max_mass,DstZone_mass);od:OrgZone_rel,DstZone_rel,impedance'
						, Minutes, F1, F2, TwoDirections, OriginPoints/NodeRef, SelDestinationPoints/NodeRef, 5f, 1f) {
					attribute<float32> pull:= RelevantSettlements/Pop[SelDestinationPoints/RelSettRef[DstZone_rel]] * (max_elem(Impedance, 0.01f)^Grav_func);
					attribute<RelevantSettlements> destpoint:= SelDestinationPoints/RelSettRef[DstZone_rel];
				}
				attribute<Create_Matrix> max_pull_id (OriginPoints):= max_index(Create_Matrix/pull, Create_Matrix/OrgZone_rel);
				attribute<SelDestinationPoints> dependent_point	(OriginPoints):= Create_Matrix/DstZone_rel[max_pull_id];
				attribute<float32> tt (OriginPoints):= Create_Matrix/Impedance[max_pull_id];
			}*/
			container Specification_Reference:= =Use_Grav_spec ? 'Gravity_spec' : 'Find_Only_Closest';
			
			container Add_Unconnected_Grids := 
				for_each_ne(
					sep_Country_Units/ZoneId
					, (sep_Country_Units/any_connection ? 'Add_Unconnected_Grids__wconn_T(' : 'Add_Unconnected_Grids__noconn_T(')+string(id(sep_Country_Units))+')'
				) 
			{
				// parameter<ipoint>         divpoint   := point_xy(1000i, 1000i, ipoint);
				// parameter<WorldMollweide> shiftpoint := min(Geometry_mw) - point_xy(500d, 500d, WorldMollweide);
				
				// unit<ipoint>        WorldMollweide_km    := gridset(WorldMollweide, divpoint, point_xy(0i,0i), ipoint);
				
				unit<uint32> all_grids:= ='union_unit(Country_Connected_Grids,'+asitemlist(Rel_sep_country_units/ZoneId+'/sepunit_unconnected_grids')+')' 
				{
					attribute<WebMercator>         geometry                 := ='union_data(., Country_Connected_Grids/Geometry, '+asitemlist(Rel_sep_country_units/ZoneId+'/sepunit_unconnected_grids/Geometry')+')';
					attribute<float32>             Pop                      := ='union_data(., Country_Connected_Grids/Pop, '+asitemlist(Rel_sep_country_units/ZoneId+'/sepunit_unconnected_grids/Pop')+')';
					attribute<WorldMollweide>      geometry_mw              := Geometry[WorldMollweide];
					attribute<Country_Settlements> dependent_point          := ='union_data(., Specification_Reference/dependent_point, '+asitemlist(Rel_sep_country_units/ZoneId+'/dependent_point')+')';
					attribute<WorldMollweide>      geometry_mw_poly (poly)  := points2sequence(makepoly/Point, makepoly/SeqNr, makepoly/Ordinal);
					
					attribute<WorldMollweide_km>   iPoly (poly)             := points2sequence(makepoly/iPoints, makepoly/SeqNr, 4 - makepoly/Ordinal);
					//attribute<ipoint>                     Polyset (poly)             := points2sequence(makepoly/iPoints, makepoly/SeqNr, 4 - makepoly/Ordinal);
					
					unit<uint32> makepoly:= union_unit(all_grids, all_grids, all_grids, all_grids, all_grids) 
					{
						attribute<WorldMollweide> point   := union_data(., 
																	Geometry_mw + const(point_xy(-500d,  500d, WorldMollweide), all_grids, WorldMollweide), 
																	Geometry_mw + const(point_xy(-500d, -500d, WorldMollweide), all_grids, WorldMollweide),
																	Geometry_mw + const(point_xy( 500d, -500d, WorldMollweide), all_grids, WorldMollweide), 
																	Geometry_mw + const(point_xy( 500d,  500d, WorldMollweide), all_grids, WorldMollweide), 
																	Geometry_mw + const(point_xy(-500d,  500d, WorldMollweide), all_grids, WorldMollweide));
						// attribute<WorldMollweide_km>                    iPoints := point[ipoint] / divpoint;
						attribute<WorldMollweide_km>                    iPoints := point[WorldMollweide_km];
						attribute<all_grids>                 SeqNr   := union_data(., id(all_grids), id(all_grids), id(all_grids), id(all_grids), id(all_grids));
						attribute<uint32>                    Ordinal := id(.) / #all_grids;
					}
					
				}
			}
			
			Template Add_Unconnected_Grids__wconn_T 
			{
				parameter<sep_Country_Units> in_sep_unit_nr;
				
				unit<uint32> sepunit_unconnected_grids := select_with_org_rel(Country_Unconnected_Grids/scu_rel = in_sep_unit_nr) 
				{
					attribute<WebMercator> Geometry  := Country_Unconnected_Grids/Geometry[org_rel]; 
					attribute<float32>     pop       := Country_Unconnected_Grids/pop[org_rel];
				}
				unit<uint32> sepunit_connected_grids   := select_with_org_rel(Country_Connected_Grids/scu_rel = in_sep_unit_nr) 
				{
					attribute<WebMercator>         Geometry  := Country_Connected_Grids/Geometry[org_rel]; 
					attribute<Country_Settlements> dep_point := Specification_Reference/dependent_point[org_rel];
				}
				
				attribute<Country_Settlements> dependent_point (sepunit_unconnected_grids):= sepunit_connected_grids/dep_point[connect(sepunit_connected_grids/Geometry, sepunit_unconnected_grids/Geometry)];
			}
			
			Template Add_Unconnected_Grids__noconn_T 
			{
				parameter<sep_Country_Units> in_sep_unit_nr;
				
				unit<uint32> sepunit_unconnected_grids:= select_with_org_rel(Country_Unconnected_Grids/scu_rel = in_sep_unit_nr) 
				{
					attribute<WebMercator>            Geometry  := Country_Unconnected_Grids/Geometry[org_rel]; 
					attribute<float32>                pop       := Country_Unconnected_Grids/pop[org_rel];
					attribute<dpoint>                 pop_point := populated ? point(float64(pop), float64(pop), dpoint) : const(point_xy(1.0d, 1.0d, dpoint),.,dpoint);
					//attribute<float32> pull:= sum(grids_comb/pop_j / grids_comb/gridsdist, grids_comb/nr_1);
					
					attribute<dpoint>  wpoint := Geometry[dpoint] * pop_point;
					
					/*unit<uint64> grids_comb:= combine_uint64(sepunit_unconnected_grids, sepunit_unconnected_grids) {
						attribute<float32> gridsdist:= float32(dist(Geometry[Nr_1], Geometry[Nr_2]) / 1000d) + const(1f,.,float32);
						attribute<float32> pop_j:= populated ? pop[nr_2] * 1000f : 1000f;
					}*/
				}
				parameter<bool>                populated                                   := sum(sepunit_unconnected_grids/Pop) > 0f;
				parameter<WebMercator>         centroid                                    := (sum(sepunit_unconnected_grids/wpoint) / sum(sepunit_unconnected_grids/pop_point))[WebMercator];
				//parameter<sepunit_unconnected_grids> centroid_rel:= connect(sepunit_unconnected_grids/Geometry, centroid);
				parameter<Country_Settlements> closest_settlement                          := #Country_Settlements > 0 ? connect(Country_Settlements/Geometry_wm, centroid) : 0;
				attribute<Country_Settlements> dependent_point (sepunit_unconnected_grids) := const(closest_settlement, sepunit_unconnected_grids, Country_Settlements);
			}
			
			attribute<Country_Settlements> dependent (Add_Unconnected_Grids/all_grids) := #Country_Settlements > 0 ? Add_Unconnected_Grids/all_grids/dependent_point : 0;
		
			container results_choice:= cleanup_catchments/iterative_cleaning/lastIter/nextValue; //cleanup_catchments/init; //
		
			container cleanup_catchments 
			{
				parameter<bool> Abs_Size_filter:= true;
			
				container init 
				{
					attribute<all_catchments>   ac_id (Add_Unconnected_Grids/all_grids) := rlookup(dependent, all_catchments/Values);
					attribute<proto_catchments> cs_id (Add_Unconnected_Grids/all_grids) := rlookup(dependent, proto_catchments/Values);
					
					unit<uint32> all_catchments:= unique(dependent), DialogData = "ipoly", DialogType = "map" 
					{
						attribute<WorldMollweide_km>         ipoly (poly) := bp_union_polygon(Add_Unconnected_Grids/all_grids/iPoly, ac_id);
						attribute<WorldMollweide> poly  (poly) := points2sequence_pso(border_points/points_mul, border_points/sequence_rel, border_points/ordinal);
						attribute<float32>        sqkm         := area(poly, float64)[float32] / (1000f * 1000f);
						attribute<float32>        pop          := sum(Add_Unconnected_Grids/all_grids/pop, ac_id);
						// attribute<bool>           fua       := Values > #RelevantSettlements && FUA_exclusion;
						attribute<bool>           fua          := const(false,.,bool);
						
						unit<uint32>           border_points      := sequence2points(ipoly) 
						{
							// attribute<WorldMollweide> points_mul := (point * Add_Unconnected_Grids/all_grids/divpoint)[WorldMollweide];
							attribute<WorldMollweide> points_mul := point[WorldMollweide];
						}
					}
					
					unit<uint32> proto_catchments:= select_with_org_rel(!all_catchments/fua), DialogData = "ipoly", DialogType = "map" 
					{
						attribute<Country_Settlements> Values       := all_catchments/Values[org_rel];
						attribute<WorldMollweide_km>              ipoly (poly) := all_catchments/ipoly[org_rel];
						attribute<WorldMollweide>      poly (poly)  := all_catchments/poly[org_rel];
						attribute<float32>             sqkm         := area(poly, float64)[float32] / (1000f * 1000f);
						attribute<bool>                fua          := all_catchments/fua[org_rel];
						attribute<.>                   org_dep      := id(.);
					}
					
					unit<uint32> fua_catchments:= select_with_org_rel(all_catchments/fua), DialogData = "ipoly", DialogType = "map" 
					{
						attribute<uint32>              Values       := all_catchments/Values[org_rel];
						attribute<WorldMollweide_km>              ipoly (poly) := all_catchments/ipoly[org_rel];
						attribute<WorldMollweide>      poly  (poly) := all_catchments/poly[org_rel];
						attribute<float32>             sqkm         := area(poly, float64)[float32] / (1000f * 1000f);
						attribute<bool>                fua          := all_catchments/fua[org_rel];
					}
				}
				container iterative_cleaning := loop(iterative_cleaner, uint16(10));
			}
			
			Template iterative_cleaner 
			{
				parameter<uint16> nrIter;
				container currValue:= init;
				container nextValue 
				{
					attribute<split_proto_catchments> spc_id (Add_Unconnected_Grids/all_grids):= point_in_polygon(Add_Unconnected_Grids/all_grids/geometry_mw, split_proto_catchments/poly);
					
					unit<uint32> split_proto_catchments := bp_split_polygon(currValue/proto_catchments/ipoly) 
					{
						attribute<WorldMollweide> poly  (poly) := points2sequence_pso(border_points/points_mul, border_points/sequence_rel, border_points/ordinal);
						unit<uint32> border_points      := sequence2points(geometry) 
						{
							// attribute<WorldMollweide> points_mul := (point * Add_Unconnected_Grids/all_grids/divpoint)[WorldMollweide];
							attribute<WorldMollweide> points_mul := point[WorldMollweide];
						}
						attribute<float32>         sqkm                   := area(poly, float64)[float32] / (1000f * 1000f);
						attribute<float32>         relsize                := sqkm / currValue/proto_catchments/sqkm[polygon_rel];
						attribute<float32>         Pop                    := sum(Add_Unconnected_Grids/all_grids/Pop, spc_id);
						attribute<uint32>          conn                   := pcount(spc_conn_matrix/F1) + pcount(spc_conn_matrix/F2);
						attribute<bool>	           fua                    := currValue/proto_catchments/fua[polygon_rel];
						attribute<uint32>          org_dep                := currValue/proto_catchments/org_dep[polygon_rel];
						attribute<bool>            no_pop                 := Pop < 100f;
						attribute<bool>            only_fua_neighbours    := all(spc_conn_matrix/cfua, spc_conn_matrix/F1) && all(spc_conn_matrix/cfua, spc_conn_matrix/F2);
						attribute<bool>            no_neighbours          := pcount(spc_conn_matrix/F1) + pcount(spc_conn_matrix/F2) < 1;
						attribute<bool>            only_prior_neighbours  := all(spc_conn_matrix/prior_rel, spc_conn_matrix/F1) && all(spc_conn_matrix/prior_rel, spc_conn_matrix/F2);
						attribute<bool>            small_absolute_size    := Abs_Size_filter && sqkm <= 100f;
						attribute<bool>            small_relative_size    := relsize < 0.1f;
						attribute<bool>            doesnot_contain_centre := pcount(point_in_polygon(Country_Settlements/Geometry_mw, poly)) < 1;
						
						attribute<bool>            drop                   := no_pop && (!Abs_Size_filter || small_absolute_size) && (only_fua_neighbours || no_neighbours || only_prior_neighbours);
						attribute<bool>            join                   := (small_absolute_size || small_relative_size || doesnot_contain_centre) && !no_neighbours && !only_fua_neighbours;
						attribute<bool>            exclave                := Identify_exclaves && !fua && !drop && doesnot_contain_centre && (only_fua_neighbours || no_neighbours || only_prior_neighbours);
						
						attribute<spc_conn_matrix> fbest                  := max_index(spc_conn_matrix/score,spc_conn_matrix/F1);
						attribute<spc_conn_matrix> tbest                  := max_index(spc_conn_matrix/score,spc_conn_matrix/F2);
						attribute<float32>         fscore                 := makedefined(spc_conn_matrix/score[fbest], -1f);
						attribute<float32>         tscore                 := makedefined(spc_conn_matrix/score[tbest], -1f);
						
						attribute<.>               candidate              := switch(
																				case(fua, polygon_rel[.])
																				, case(drop, const(0 / 0, ., .))
																				, case(exclave, #.+1)
																				, case(join && fscore >= tscore, spc_conn_matrix/F2[fbest])
																				, case(join && tscore > fscore, spc_conn_matrix/F1[tbest])
																				, id(.)
																			);
						attribute<.>               jointo                 := candidate[candidate] = id(.) ? min_elem(candidate, id(.)) : candidate;
						//attribute<.> jointo:= !join[candidate_check_swaps] ? candidate_check_swaps : candidate_check_swaps[candidate_check_swaps];
						
						attribute<proto_catchments>pc_id                  := rlookup(jointo, proto_catchments/Values);
						
						unit<uint32> spc_conn_matrix:= polygon_connectivity(Geometry) 
						{
							attribute<bool>     cfua        := fua[F1] || fua[F2];
							attribute<bool>     prior_rel   := polygon_rel[F1] == polygon_rel[F2];
							attribute<bool>     unpreferred := cfua || prior_rel;
							attribute<float32>  score       := (float32(!cfua) * max_elem(Pop[F1], Pop[F2])) / (1f + (float32(prior_rel) * 1000f));
						}
					}
					unit<uint32> proto_catchments := unique(split_proto_catchments/jointo), DialogData= "ipoly", DialogType = "map" 
					{
						attribute<WorldMollweide_km>         ipoly (poly) := bp_union_polygon(split_proto_catchments/Geometry, split_proto_catchments/pc_id);
						attribute<WorldMollweide> poly  (poly) := points2sequence_pso(border_points/points_mul, border_points/sequence_rel, border_points/ordinal);
						attribute<float32>        sqkm         := area(poly, float64)[float32] / (1000f * 1000f);
						attribute<bool>	          fua          := any(split_proto_catchments/fua, split_proto_catchments/pc_id);
						attribute<bool>           exclv        := all(split_proto_catchments/exclave, split_proto_catchments/pc_id);
						attribute<uint32>         org_dep      := modus_weighted(split_proto_catchments/org_dep, split_proto_catchments/Pop, split_proto_catchments/pc_id);
						
						unit<uint32>           border_points      := sequence2points(ipoly) 
						{
							// attribute<WorldMollweide> points_mul := (point * Add_Unconnected_Grids/all_grids/divpoint)[WorldMollweide];
							attribute<WorldMollweide> points_mul := point[WorldMollweide];
						}
						
					}
				}
			}
			attribute<cleaned_catchments> cs_id (Add_Unconnected_Grids/all_grids) := point_in_polygon(Add_Unconnected_Grids/all_grids/Geometry_mw, cleaned_catchments/poly);
			attribute<cleaned_catchments> Catchment_Id      (Country_Settlements) := point_in_polygon(Country_Settlements/Geometry_mw, cleaned_catchments/poly);
			
			unit<uint32> cleaned_catchments := union_unit(results_choice/proto_catchments, cleanup_catchments/init/fua_catchments ) 
			{
				attribute<WorldMollweide>       poly (poly)        := union_data(., results_choice/proto_catchments/poly, cleanup_catchments/init/fua_catchments/poly);
				attribute<bool>                 fua                := union_data(., results_choice/proto_catchments/fua, cleanup_catchments/init/fua_catchments/fua);
				//attribute<bool>               exclv              := union_data(., results_choice/proto_catchments/exclv, const(false, cleanup_catchments/init/fua_catchments, bool));
				attribute<Country_Settlements>  biggest_settlement := max_index(Country_Settlements/Pop, Catchment_Id);
			}
			
			parameter<string> settlements_refname:= ='Analyses/Settlements_Per_Continent/'+Continent_name+'/select/refname';
			parameter<string> filepath:= '%LocalDataProjDir%/Settlement_Catchments/'+settlements_refname+'/'+(FUA_exclusion ? 'without_fuas/' : '')+Centres_Thresholds/name[inThreshold]+'_pop'+string(minPop / 1000f)+'/'+Continent_Name+'/'+inCountries/ZoneId[inCountry];
			
			parameter<bool> store_catchment:= true, ExplicitSuppliers = "all_catchments;";
			
			unit<uint32> all_catchments:= cleaned_catchments
			, DialogData = "poly"
			, DialogType = "map"
			, StorageName = "= filepath+'.dbf'" 
			{
				attribute<WorldMollweide>  poly (poly) := cleaned_catchments/poly, StorageName = "= filepath+'.shp'";
				attribute<float32>         Pop         := sum(Add_Unconnected_Grids/all_grids/Pop, cs_id);
				attribute<uint8>           fua         := uint8(cleaned_catchments/fua);
				//attribute<uint8>         exclv:= "uint8(cleaned_catchments/exclv);
				//attribute<string>        Name:= "exclv < 1b ? MakeDefined(Settlements/LabelText[biggest_settlement], 'None') : 'Exclaves '+region_unit/ZoneId[inRegion];
				attribute<string>          Label      := MakeDefined(Country_Settlements/Label[biggest_settlement], 'none_'+string(id(.)));
				//attribute<string>        category:= MakeDefined(Settlements/category[biggest_settlement], 'None');
				//attribute<float32>       med_t:= rth_element(tt, 0.5f, dependent)[Values];
				//attribute<float32>       max_t:= max(tt, dependent)[Values];
				//attribute<float32>       mw_t:= (sum(OriginPoints/Pop * tt, dependent) / sum(OriginPoints/Pop, dependent))[Values];
			}
			unit<uint32> all_catchments_readonly 
			: StorageName = "= propvalue(all_catchments/poly, 'StorageName')"
			, StorageType = "gdal.vect"
			, StorageReadOnly = "True" 
			{
				attribute<WorldMollweide>       Geometry (poly);
				attribute<WorldMollweide>		Centroid		:= centroid_or_mid(Geometry);
				attribute<string>               Label;
				attribute<Country_Settlements>  settRef         := rlookup(Label, Country_Settlements/Label);
				attribute<FinalNodeSet>         NodeRef         := makedefined(Country_Settlements/NodeId[settRef], connect(FinalNodeSet/geometry, Centroid[WebMercator])); //, Country_Connected_Grids/NodeId[connect(Country_Connected_Grids/Geometry_mw, centroid_or_mid(Geometry))]);
			}
			//parameter<string> result_available:= strcount(ExistingFile('X_X_X_X',(filepath+'.shp')), 'X_X_X_X') < 1; 
		}
	}
	
	Template Settlement_Hierarchy_T
	{
		parameter<string> Continent_name;
		unit<uint32>      Org;
		unit<uint32>      Dest;
		container         NetwerkSpec;
		///

		unit<uint32> FinalLinkSet := NetwerkSpec/FinalLinkSet_Read;
		unit<uint32> FinalNodeSet := NetwerkSpec/FinalNodeSet_Read;
		
		attribute<WebMercator>  Org_centroid_wm (Org) := convert(Org/centroid, WebMercator);
		attribute<FinalNodeSet> Closest_node    (Org) := connect(FinalNodeSet/geometry, Org_centroid_wm);
		attribute<bool>         Close_enough    (Org) := dist(Org_centroid_wm, FinalNodeSet/geometry[Closest_node]) < 100d;
		attribute<FinalNodeSet> Org_NodeId      (Org) := Close_enough ? Closest_node : const(0 / 0, Org, FinalNodeSet);
		
		unit<uint32> Unconnected_Settlements:= select_with_org_rel(IsNull(Org_NodeId)), dialogdata = "centroid", dialogtype = "map" 
		{
			attribute<BaseProjection> centroid := Org/centroid[org_rel];
		}
		
		unit<uint32> Connected_Settlements := select_with_org_rel(IsDefined(Org_NodeId)), dialogdata = "centroid", dialogtype = "map" 
		{
			attribute<BaseProjection>  centroid    := Org/centroid[org_rel];
			attribute<FinalNodeSet>    NodeId      := Org_NodeId[org_rel];
			attribute<float32>         population  := Org/population[org_rel];
			attribute<Countries>       Country_rel := Org/Country_rel[org_rel];
			attribute<string>          Label       := Org/Label[org_rel];
			attribute<uint32>		   Type	   	   := Org/Type[org_rel];
		}
		
		unit<uint64> OD_matrix :=
			impedance_matrix_od64('bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel'
				, FinalLinkSet/impedance
				, FinalLinkSet/F1
				, FinalLinkSet/F2
				
				, !FinalLinkSet/IsOneDirection
				, Connected_Settlements/NodeId 
				, Connected_Settlements/NodeId 
				, convert(max(Centres_Thresholds/num), s_f) //cut impedance
			) 
		{
			attribute<float32> pop_i:= Connected_Settlements/population[OrgZone_rel];
			attribute<float32> pop_j:= Connected_Settlements/population[DstZone_rel];
		}
			
		parameter<string> filepath:= '%LocalDataProjDir%/Settlement_Hierarchy/'+Org/refname+'/'+Continent_Name;
		
		container biggest_centre:= 
			for_each_nedva(
				Centres_Thresholds/name
				, 'uint32(id(Connected_Settlements) = OD_matrix/DstZone_rel[max_index(OD_matrix/pop_j * float32(float32(OD_matrix/impedance) <= '+Centres_Thresholds/ns+'), OD_matrix/OrgZone_rel)])'
				, Connected_Settlements
				, uint32
				, filepath+'.dbf'
			);
		
		parameter<bool> Store_Hierarchies  := TRUE, ExplicitSuppliers = "Hierarchies_write";
		
		unit<uint32> Hierarchies_write := Connected_Settlements
		, storagename = "= filepath+'.dbf'" 
		{
			attribute<BaseProjection> poly (poly) := Org/Geometry_LL[org_rel], storagename = "= filepath+'.shp'";
			attribute<BaseProjection> point       := Org/centroid[org_rel], storagename = "= filepath+'_point.shp'";
			attribute<string>         Label       := Org/Label[org_rel];
			attribute<uint32>         CountryId   := Country_rel;
			attribute<string>         Country     := Countries/Label[Country_rel];
			attribute<float32>        Pop         := population;
			attribute<uint32>         Maxl        := = 'max_elem('+AsItemList('(biggest_centre/'+Centres_Thresholds/name+' * uint32('+string(Centres_Thresholds/num)+'))')+')';
		}
			
		unit<uint32> Hierarchies_ReadOnly 
		: storagename = "= propvalue(Hierarchies_write, 'StorageName')"
		, StorageReadOnly = "true"
		, storagetype = "gdal.vect"
		, StorageReadOnly = "true"
		{
			attribute<BaseProjection>        point : storagename = "= propvalue(Hierarchies_write/point, 'StorageName')", StorageReadOnly = "true";
			attribute<Connected_Settlements> Connected_Settlements_rel := rlookup(Label, Connected_Settlements/Label);
			attribute<uint32>				 Type					   := Connected_Settlements/Type[Connected_Settlements_rel];
			attribute<FinalNodeSet>          NodeId                    := Connected_Settlements/NodeId[Connected_Settlements_rel];
			attribute<string>                Label; 
			attribute<bool>					 inFUA					   := isdefined(point_in_polygon(point, /SourceData/RegionalUnits/FUAs/Geometry));
		}
	}
}