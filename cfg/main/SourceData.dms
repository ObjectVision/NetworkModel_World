container SourceData: Using = "Units;Classifications;geometries"
{
	#include<Infrastructure.dms>
	#include<RegionalUnits.dms>
	
	container Settlements : using = "RegionalUnits"
	{
		parameter<string> set:= /ModelParameters/Settlements_Set;
		
		unit<uint32> sett_sets: nrofrows = 2 {
			attribute<string> label: ['SMOD_V1s6_opr_P2023_v1_2000', 'SMOD_V1s6_opr_P2023_v1_2020'];
			attribute<string> popdef: ['POP_2000', 'POP_2020'];
		}
		
		container all_settlement_sets:= for_each_ne(sett_sets/label, 'make_Settlement_Sets('+string(id(sett_sets))+')');
		
		unit<uint32> all_settlements:= ='all_settlement_sets/'+set+'/all_settlements';
		
		unit<uint32> unioned_settlements:= ='union_unit('+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements')+')' {
			attribute<WorldMollweide> geometry    (poly) := ='union_data(., '+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements/geometry')+')';
			attribute<WGS84>          geometry_LL (poly) := ='union_data(., '+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements/geometry_LL')+')';
			attribute<int32>          ID                 := ='union_data(., '+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements/ID')+')';
			attribute<WGS84>          centroid           := ='union_data(., '+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements/centroid')+')';
			attribute<Countries>      country_rel        := ='union_data(., '+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements/country_rel')+')';
			attribute<Continents>     continent_rel      := ='union_data(., '+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements/continent_rel')+')';
			attribute<float32>     	  population         := ='union_data(., '+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements/population')+')';
			attribute<string>         Label              := ='union_data(., '+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements/Label')+')';
			attribute<uint32>		  Type				 := ='union_data(., '+asitemlist('all_settlement_sets/'+sett_sets/label+'/all_settlements/Type')+')';
			parameter<string> 		  set 				 := aslist(sett_sets/label, '_');
		}
		
		Template make_Settlement_Sets {
			
			parameter<sett_sets> inSetRel;
			parameter<string> set:= sett_sets/label[inSetRel];
			parameter<string> popdef:= sett_sets/popdef[inSetRel];
			
			unit<uint32> all_settlements:= union_unit(villages, semidensetowns, towns, cities), dialogdata = "geometry_LL", dialogtype = "map" 
			{
				attribute<WorldMollweide> geometry    (poly) := union_data(., villages/geometry, semidensetowns/geometry, towns/geometry, cities/geometry);
				attribute<WGS84>          geometry_LL (poly) := union_data(., villages/geometry_LL, semidensetowns/geometry_LL, towns/geometry_LL, cities/geometry_LL);
				attribute<int32>          ID                 := union_data(., villages/ID, semidensetowns/ID, towns/ID, cities/ID);
				attribute<string>         Label              := union_data(., villages/Label, semidensetowns/Label, towns/Label, cities/Label);
				attribute<WGS84>          centroid           := union_data(., villages/centroid, semidensetowns/centroid, towns/centroid, cities/centroid);
				attribute<Countries>      country_rel        := point_in_polygon(centroid, Countries/Geometry);
				attribute<Continents>     continent_rel      := union_data(., villages/continent_rel, semidensetowns/continent_rel, towns/continent_rel, cities/continent_rel);
				attribute<float32>     	  population         := float32(union_data(., villages/popval, semidensetowns/popval, towns/popval, cities/popval));
				//attribute<string>         Label              := MakeDefined(Countries/Label[country_rel],'None')+'_'+union_data(.,const('vill',villages,string),const('sdt',semidensetowns,string),const('town',towns,string),const('city',cities,string))+'_'+string(ID);
				attribute<uint32>		  Type				 := union_data(., const(13, villages, uint32), const(22, semidensetowns, uint32), const(23, towns, uint32), const(30, cities, uint32));
				parameter<string> 		  set				 := Settlements/set;
			}
			
			
			unit<uint32> villages // SMOD_V1s6_opr_P2023_v1_2020_labelRC_DB -> villages -> degurba klasse 13
			: StorageName = "= '%NetworkModelWorld_DataDir%/Settlements/'+set+'/'+set+'_labelRC_DB.shp'"
			, StorageType = "gdal.vect"
			, DialogData  = "geometry"
			, DialogType = "Map"
			, StorageReadOnly = "TRUE"
			{
				attribute<WorldMollweide> geometry    (poly);
				attribute<WGS84>          geometry_LL (poly) :=  convert(geometry, WGS84);
				attribute<int32>          ID                 := ID_RC_G0;
				attribute<string>		  Label			     := 'RC___'+string(ID);
				attribute<float32>	      popval			 := ='float32('+popdef+')';
				attribute<WGS84>          centroid           := rjoin(ID, CalcCentroids/read/villages/type/id, CalcCentroids/read/villages/type/centroid);
				attribute<Continents>     continent_rel      := rjoin(ID, CalcCentroids/read/villages/type/id, CalcCentroids/read/villages/type/continent_rel);
			}
			
			unit<uint32> semidensetowns // SMOD_V1s6_opr_P2023_v1_2020_labelSDUC_DB -> semi-dense towns -> degurba klasse 22
			: StorageName = "= '%NetworkModelWorld_DataDir%/Settlements/'+set+'/'+set+'_labelSDUC_DB.shp'"
			, StorageType = "gdal.vect"
			, DialogData  = "geometry"
			, DialogType = "Map"
			, StorageReadOnly = "TRUE"
			{
				attribute<WorldMollweide> geometry    (poly);
				attribute<WGS84>          geometry_LL (poly) :=  convert(geometry, WGS84);
				attribute<int32>          ID                 := ID_SDUC_G0;
				attribute<string>		  Label			     := 'SDUC_'+string(ID);
				attribute<float32>	      popval			 := ='float32('+popdef+')';
				attribute<WGS84>          centroid           := rjoin(ID, CalcCentroids/read/semidensetowns/type/id, CalcCentroids/read/semidensetowns/type/centroid);
				attribute<Continents>     continent_rel      := rjoin(ID, CalcCentroids/read/semidensetowns/type/id, CalcCentroids/read/semidensetowns/type/continent_rel);
				
				// unit<uint32> xy_to_yx := sequence2points(geometry[WGS84])
				// {
					// attribute<WGS84> point_yx := point(PointCol(point), PointRow(point))[WGS84];
				// }
			}
			
			unit<uint32> towns // SMOD_V1s6_opr_P2023_v1_2020_labelDUC_DB -> towns -> degurba klasse 23
			: StorageName = "= '%NetworkModelWorld_DataDir%/Settlements/'+set+'/'+set+'_labelDUC_DB.shp'"
			, StorageType = "gdal.vect"
			, DialogData  = "WorldMollweide"
			, DialogType = "Map"
			, StorageReadOnly = "TRUE"
			{
				attribute<WorldMollweide> geometry    (poly);
				// attribute<WGS84>          geometry_LL (poly) :=  points2sequence(xy_to_yx/point_yx, xy_to_yx/Sequence_rel);
				attribute<WGS84>          geometry_LL (poly) :=  convert(geometry, WGS84);
				attribute<int32>          ID                 := ID_DUC_G0;
				attribute<string>		  Label			     := 'DUC__'+string(ID);
				attribute<float32>	      popval			 := ='float32('+popdef+')';
				attribute<WGS84>          centroid           := rjoin(ID, CalcCentroids/read/towns/type/id, CalcCentroids/read/towns/type/centroid);
				attribute<Continents>     continent_rel      := rjoin(ID, CalcCentroids/read/towns/type/id, CalcCentroids/read/towns/type/continent_rel);
				
				// unit<uint32> xy_to_yx := sequence2points(geometry[WGS84])
				// {
					// attribute<WGS84> point_yx := point(PointCol(point), PointRow(point))[WGS84];
				// }
			}
			
			unit<uint32> cities // SMOD_V1s6_opr_P2023_v1_2020_labelUC_DB -> cities -> degurba klasse 30
			: StorageName = "= '%NetworkModelWorld_DataDir%/Settlements/'+set+'/'+set+'_labelUC_DB.shp'"
			, StorageType = "gdal.vect"
			, DialogData  = "geometry_LL"
			, DialogType = "Map"
			, StorageReadOnly = "TRUE"
			{
				attribute<WorldMollweide> geometry    (poly);
				// attribute<WGS84>          geometry_LL (poly) :=  points2sequence(xy_to_yx/point_yx, xy_to_yx/Sequence_rel);
				attribute<WGS84>          geometry_LL (poly) :=  convert(geometry, WGS84);
				attribute<int32>          ID                 := ID_UC_G0;
				attribute<string>		  Label			     := 'UC___'+string(ID);
				attribute<float32>	      popval			 := ='float32('+popdef+')';
				attribute<WGS84>          centroid           := rjoin(ID, CalcCentroids/read/cities/type/id, CalcCentroids/read/cities/type/centroid);
				attribute<Continents>     continent_rel      := rjoin(ID, CalcCentroids/read/cities/type/id, CalcCentroids/read/cities/type/continent_rel);
				
				// unit<uint32> xy_to_yx := sequence2points(geometry[WGS84])
				// {
					// attribute<WGS84> point_yx := point(PointCol(point), PointRow(point))[WGS84];
				// }
			}
		
			container CalcCentroids
			{
				parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList('Write/'+Classifications/SettlementTypes/name+'/type', ';')";
				// parameter<string> Generate_crel := 'Ready', ExplicitSuppliers = "=AsList('Write/'+Classifications/SettlementTypes/name+'/type/continent_rel', ';')";
				
				container Write :=
					for_each_ne(
						Classifications/SettlementTypes/name
						, 'Write_Centroids_T('+quote(Classifications/SettlementTypes/name)+')'
					);
				container Read :=
					for_each_ne(
						Classifications/SettlementTypes/name
						, 'Read_Centroids_T('+quote(Classifications/SettlementTypes/name)+')'
					);
				
				Template Write_Centroids_T
				{
					parameter<string> SettlementType_name;
					///
					
					unit<uint32> type := =set+'/'+SettlementType_name
					, StorageName = "='%NetworkModelWorld_DataDir%/Settlements/'+set+'/'+SettlementType_name+'_centroid_Pop-'+Population/gridsize+'m.fss'"
					{
						attribute<WGS84>          centroid           := CalcPopCentroids/CalcPopCentroids/geometry;
						attribute<int32>          ID                 := =set+'/'+SettlementType_name+'/ID';
						attribute<Continents>     continent_rel      := ='point_in_polygon(centroid, continents/geometry)';

						container CalcPopCentroids := CalcPopCentroids_T(.), DisableStorage = "TRUE";
					}
				}
				
				Template Read_Centroids_T
				{
					parameter<string> SettlementType_name;
					///
					
					unit<uint32> type
					: StorageName = "='%NetworkModelWorld_DataDir%/Settlements/'+set+'/'+SettlementType_name+'_centroid_Pop-'+Population/gridsize+'m.fss'"
					, StorageReadOnly = "true"
					{
						attribute<WGS84>          centroid;
						attribute<int32>          ID;
						attribute<Continents>     continent_rel;
					}
				}
			}
		}
	}
	
	container Population: Using = "RegionalUnits;"
	{
		parameter<string> GridSize          := /ModelParameters/PopGridSize;
		parameter<string> FileName_src      := '%NetworkModelWorld_DataDir%/population/GHS_POP_E2020_GLOBE_R2023A_54009_@GRID@_V1_0';
		parameter<string> FileName          := replace(FileName_src, '@GRID@', Gridsize);

		unit<ipoint> big_raster
		:	StorageName     = "= FileName+'.tif'"
		,	StorageType		= "gdal.grid"
		,	StorageReadOnly = "True"
		,	DialogData      = "WorldMollweide"
		, 	LazyCalculated  = "true"
		{ 
			attribute<float64>      GridData; // don't read this; memory will explode
			attribute<Sep_units>    sep_unit_rel:= poly2grid(Sep_units/Geometry_MW, .);
		}
		
		unit<uint64> sel_LandCells := select(IsDefined(big_raster/sep_unit_rel)), DialogType = "map", DialogData = "org_rel"  // big_raster/GridData >= 0d && selection criterion removed (problematic exception in Canada)
		{
			attribute<big_raster>     org_rel              := collect_by_cond(sel_LandCells, IsDefined(big_raster/sep_unit_rel), id(big_raster));
			attribute<Sep_units>      sep_unit_rel         := collect_by_cond(sel_LandCells, IsDefined(big_raster/sep_unit_rel), big_raster/sep_unit_rel);
			attribute<float64>        population           := collect_by_cond(sel_LandCells, IsDefined(big_raster/sep_unit_rel), big_raster/GridData);
			attribute<WGS84>          Geometry             := convert(org_rel, WGS84);
		}
		unit<uint64> store_LandCells := sel_LandCells, storagename = "= FileName+'.fss'" 
		{
			attribute<big_raster>     org_rel              := sel_LandCells/org_rel;
			attribute<Sep_units>      sep_unit_rel         := sel_LandCells/sep_unit_rel;
			attribute<float64>        population           := sel_LandCells/population;
			attribute<WGS84>          geometry             := sel_LandCells/geometry;
		}	
		unit<uint64> LandCells : storagename = "= propvalue(store_LandCells, 'StorageName')", StorageReadOnly = "True" 
		{
			attribute<big_raster>     org_rel;
			attribute<Sep_units>      sep_unit_rel;
			attribute<float64>        population;
			attribute<WGS84>          geometry;
			attribute<Countries>      country_rel	:= Sep_units/country_rel[sep_unit_rel];
			attribute<Continents>     continent_rel := Countries/continents_rel[country_rel];
			attribute<WGS84>          centroid      := geometry;
		}
		unit<uint64> PopulatedCells := select(LandCells/population > 0d), DialogType = "map", DialogData = "org_rel"  
		{
			attribute<big_raster>     org_rel              := collect_by_cond(PopulatedCells, LandCells/population > 0d, LandCells/org_rel);
			attribute<WGS84>          geometry             := collect_by_cond(PopulatedCells, LandCells/population > 0d, LandCells/geometry);
			attribute<Countries>      country_rel          := collect_by_cond(PopulatedCells, LandCells/population > 0d, LandCells/country_rel);
			attribute<float64>        population           := collect_by_cond(PopulatedCells, LandCells/population > 0d, LandCells/population);
			attribute<Continents>     continent_rel        := collect_by_cond(PopulatedCells, LandCells/population > 0d, LandCells/continent_rel);
		}
	}
	
	Template CalcPopCentroids_T
	{
		unit<uint32> src;
		///
	
		unit<uint32> CalcPopCentroids := src
		{
			attribute<float64> W          := sum(Population/pop, Population/settlement_rel);
			
			attribute<float64> Weighted_X := sum(Population/x * Population/pop, Population/settlement_rel);
			attribute<float64> Weighted_Y := sum(Population/y * Population/pop, Population/settlement_rel);
			
			attribute<float64> mean_X     := Weighted_X / W;
			attribute<float64> mean_Y     := Weighted_y / W;
			 
			attribute<WGS84>  weighted_centroid0            := point(mean_X, mean_Y, WGS84);
			attribute<bool>   IsWeighted_centroid_in_settl  := IsDefined(point_in_polygon(weighted_centroid0, src/geometry_LL));
			attribute<WGS84>  weighted_centroid             := IsWeighted_centroid_in_settl ? weighted_centroid0 : centroid_or_mid(src/geometry_LL);
			attribute<WGS84>  geometry                      := weighted_centroid;
			
			unit<uint64> Population := SourceData/Population/PopulatedCells
			{
				attribute<src>     settlement_rel := point_in_polygon(geometry, src/geometry_ll);
				attribute<float64> x              := pointcol(geometry);
				attribute<float64> y              := pointrow(geometry);
				attribute<float64> pop            := population[float64];
				
			}
		}
	}
}
