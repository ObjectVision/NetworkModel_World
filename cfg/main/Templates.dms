container Templates: Using = "Units;Classifications;geometries"
{
	Template CreateNetwork_T
	{
		// begin case parameters
		unit<uint32> OrgDomain0;
		unit<uint32> DestDomain0;
		unit<uint32> RoadDomain0;
		// end case parameters

		unit<uint32> OrgDomain := OrgDomain0
		{
			attribute<BaseProjection>  geometry            := OrgDomain0/centroid;
			attribute<uq_OD_points>    uq_OD_points_rel    := rlookup(ipoint(centroid), ipoint(uq_OD_points/geometry));
		}
		
		unit<uint32> DestDomain := DestDomain0
		{
			attribute<BaseProjection>  geometry            := DestDomain0/centroid;
			attribute<uq_OD_points>    uq_OD_points_rel    := rlookup(ipoint(centroid), ipoint(uq_OD_points/geometry));
		}
		
		attribute<BaseProjection>                      OrgLocations  (OrgDomain)      := orgDomain/centroid;
		attribute<BaseProjection>                      destLocations (DestDomain)     := destDomain/centroid;
		attribute<spoint>                              OrgLocations_spoint  (OrgDomain)      := OrgLocations[Base_grid_spoint];
		attribute<spoint>                              destLocations_spoint (DestDomain)     := destLocations[Base_grid_spoint];
		
		unit<uint32> OD_points := union_unit(orgDomain, destDomain) //fka Locations
		{
			attribute<BaseProjection>                  geometry                       := union_data(.,orgLocations, destLocations);
			// attribute<spoint>                          as_spoint                      := union_data(.,OrgLocations_spoint, destLocations_spoint);
			attribute<bool>                            IsOrg                          := union_data(.,const(TRUE , OrgDomain), const(FALSE,DestDomain));
			attribute<bool>                            IsDest                         := union_data(.,const(FALSE, OrgDomain), const(TRUE ,DestDomain));
		}
		
		unit<uint32> uq_OD_points    := unique(OD_points/geometry) // fka UniqueLocations
		, DialogData = "geometry_wm"
		, DialogType = "map"
		{ 
			attribute<BaseProjection>               geometry       := values;
			attribute<Geometries/WorldMollweide>    geometry_mw    := convert(point(PointCol(geometry), PointRow(geometry))[BaseProjection], Geometries/WorldMollweide);
			attribute<WebMercator>                  geometry_wm    := convert(point(PointCol(geometry), PointRow(geometry))[BaseProjection], WebMercator);
			attribute<OD_points>                    Locations_rel  := rlookup(geometry, OD_points/geometry);
			attribute<OrgDomain>                    OrgDomain_rel  := rlookup(geometry, OrgLocations);
			attribute<DestDomain>                   DestDomain_rel := rlookup(geometry, DestLocations);
			attribute<bool>                         IsOrg          := rjoin(geometry, OD_points/geometry, OD_points/IsOrg);
		}
		
		
		container CreateInitialWorkingNetwork
		{
			unit<uint32> Roads := arc2segm(RoadDomain0/geometry)
			{
				attribute<km_hr>              KPH                  := sequence_rel->KPH;
				attribute<bool>               IsOneDirection       := sequence_rel->IsOneDirection;
				attribute<bool>               Connectable          := sequence_rel->Connectable;
				
				//attribute<BaseProjection> geometry (arc)                  := RoadDomain0/geometry;
				
				//attribute<km_hr>              KPH                  := RoadDomain0/KPH;
				//attribute<bool>               IsOneDirection       := RoadDomain0/IsOneDirection;
				//attribute<bool>               Connectable          := RoadDomain0/Connectable;
				
				//attribute<BaseProjection>  first_point          := first_point(geometry);
				//attribute<BaseProjection>  last_point           := last_point(geometry); 
				
				attribute<WebMercator> point_wm       := convert(point(PointCol(point), PointRow(point))[BaseProjection], WebMercator); // convert(point(PointCol(point), PointRow(point))[BaseProjection], Geometries/WorldMollweide);
				attribute<WebMercator> nextpoint_wm   := convert(point(PointCol(nextpoint), PointRow(nextpoint))[BaseProjection], WebMercator);
				
				unit<uint32> PointSet := union_unit(., .)
				{
					attribute<BaseProjection>   geometry     := union_data(., point, nextpoint);
					attribute<WebMercator>      geometry_wm  := union_data(., point_wm, nextpoint_wm);
				}
				unit<uint32> UqGeomPointSet := unique(PointSet/geometry_wm)
				{ 
					attribute<BaseProjection>   geometry_LL  := PointSet/geometry[pointrel]; //
					attribute<WebMercator>      geometry_wm  := values;
					attribute<PointSet>         pointrel     := rlookup(geometry_wm, PointSet/geometry_wm);
					
				}
				//attribute<UqGeomPointSet> F1 := rlookup(point, UqGeomPointSet/values);
				//attribute<UqGeomPointSet> F2 := rlookup(nextpoint, UqGeomPointSet/values);
				attribute<UqGeomPointSet> F1 := rlookup(point_wm, UqGeomPointSet/geometry_wm);
				attribute<UqGeomPointSet> F2 := rlookup(nextpoint_wm, UqGeomPointSet/geometry_wm);
				
				// for checking and visualisation only
				container Connectiveness := Templates/Check_Connectiveness_T_seldomain(.,UqGeomPointSet, F1, F2, RoadSelDomain, RoadSelDomain/Geometry_LL);
				attribute<BaseProjection>  geometry    (arc) := points2sequence(PointSet/geometry, convert(id(PointSet) % #., .));
				attribute<WebMercator>     geometry_wm (arc) := points2sequence(PointSet/geometry_wm, convert(id(PointSet) % #., .));
			}
			
			unit<uint32> Roads_Connected := select_with_attr_by_cond(Roads, Roads/Connectiveness/IsVerbonden);
		
			unit<uint32> LinkSet := connect(Roads_Connected/geometry_wm, uq_OD_points/geometry_wm, (10000d^2d))
			{
				attribute<km_hr>           KPH                  := MakeDefined(arc_rel->KPH, ModelParameters/Advanced/CarDefaultSpeed_low);
				attribute<bool>            IsOneDirection       := arc_rel->IsOneDirection;
				//attribute<BaseProjection>  first_point          := point(PointCol(fp_wm[BaseProjection]), PointRow(fp_wm[BaseProjection]))[BaseProjection]; //OD point   --> vanwege directions hoeft deze niet te klopppen... 
				//attribute<BaseProjection>  last_point           := point(PointCol(lp_wm[BaseProjection]), PointRow(lp_wm[BaseProjection]))[BaseProjection];  //May or may not be an existing network node, otherwise it is a new node
				//attribute<Geometries/WorldMollweide> fp_mw      := convert(first_point, Geometries/WorldMollweide);
				//attribute<Geometries/WorldMollweide> lp_mw      := convert(last_point, Geometries/WorldMollweide);
				attribute<WebMercator>     first_point          := first_point(UnionData);
				attribute<WebMercator>     last_point           := last_point(UnionData);
				attribute<bool>            IsOD_connection_road := !IsDefined(arc_rel); // connect gives arc_rel which gives the rel to the original link, in case of existing link. Is new link, this is undefined.
				
				// For visualisation
				//attribute<BaseProjection>                  geometry_mw (arc)                 := points2sequence(PointSet/Point[BaseProjection], PointSet/SeqNr, PointSet/Ordinal);
				unit<uint32> PointSet := union_unit(.,.)
				{
					attribute<WebMercator> Point   := Union_Data(., ../first_point, ../last_point);
					attribute<..>          SeqNr   := value(id(.) % nrofrows(..), ..);
					attribute<uint32>      Ordinal := id(.) / nrofrows(..);
				}
				
				attribute<km>              LengthKm       := convert(dist(first_point, last_point)[m], km);
				attribute<min_f>           Minutes        := MakeDefined(convert((LengthKm / KPH), min_f), 0.0001[min_f]);
			}

			/*unit<uint32> NodeSet := unique(union_data(LinkSet/PointSet, LinkSet/first_point, LinkSet/last_point))
			{
				attribute<WebMercator> geometry := values;
				attribute<uint32> NrConnectedLinks := pcount(LinkSet/F1) + pcount(LinkSet/F2);
			}*/
			unit<uint32> LinkSet_Write := LinkSet,	StorageName = "= '%LocalDataProjDir%/'+Continent_name+'/Linkset_O-'+OrgName+'_D-'+Destname+'.fss'"
			{
				attribute<km_hr>           KPH                  := LinkSet/KPH;
				attribute<km>              LengthKm             := LinkSet/LengthKm;
				//attribute<bool>            IsOneDirection       := LinkSet/IsOneDirection;
				attribute<bool>            IsOneDirection       := const(False,.,bool); // don't trust digitization and onedirectional attributes yet.
				attribute<WebMercator>     first_point          := LinkSet/first_point; 
				attribute<WebMercator>     last_point           := LinkSet/last_point; 
				attribute<bool>            IsOD_connection_road := LinkSet/IsOD_connection_road;
			}
			
			unit<uint32> LinkSet_Read: StorageName = "= '%LocalDataProjDir%/'+Continent_name+'/Linkset_O-'+OrgName+'_D-'+Destname+'.fss'", StorageReadOnly = "True", dialogdata = "geometry_LL", dialogtype = "map"
			{
				attribute<km_hr>            KPH;
				attribute<km>               LengthKm;
				attribute<bool>             IsOneDirection;
				attribute<WebMercator>      first_point;
				attribute<WebMercator>      last_point;
				attribute<bool>             IsOD_connection_road;
				attribute<min_f>            Minutes               := MakeDefined(convert((LengthKm / KPH), min_f), 0.0001[min_f]);
				attribute<s_f>              impedance             := convert(minutes, s_f) + Float64(CorrectImpedanceForCrossroads/impedance_Start + CorrectImpedanceForCrossroads/impedance_End);
				attribute<WebMercator>      geometry (arc)        := points2sequence(PointSet_fromRead/Point[WebMercator], PointSet_fromRead/SeqNr, PointSet_fromRead/Ordinal);
				attribute<NodeSet_fromRead> F1                    := rlookup(first_point, NodeSet_fromRead/Values); //node from the OD towards the network
				attribute<NodeSet_fromRead> F2                    := rlookup(last_point,  NodeSet_fromRead/Values); //network node to which the the OD is connected 
				
				unit<uint32> PointSet_fromRead:= union_unit(LinkSet_Read, LinkSet_Read)
				{
					attribute<WebMercator>  Point   := Union_Data(., ../first_point, ../last_point);
					attribute<..>           SeqNr   := value(id(.) % nrofrows(..), ..);
					attribute<uint32>       Ordinal := id(.) / nrofrows(..);
				}
				unit<uint32> NodeSet_fromRead := unique(PointSet_fromRead/Point)
				{
					attribute<WebMercator>  geometry         := values;
					attribute<uint32>       NrConnectedLinks := pcount(../F1) + pcount(../F2);
				}
			}
			
 			container CorrectImpedanceForCrossroads
			// hiermee wordt voor ieder begin en eind node het aantal geconnecte links bepaald
			// dit bepaalt of het een bocht (2 links), zijweg (3 links), kruising (4 links) of complexe kruising (meer dan 4 links) is
			// afhankelijk van dit aantal wordt een aantal seconden opgeteld bij de totale impedance
			{
				// helft van de opgegeven waarden omdat er zowel bij begin als einde een factor wordt opgeteld
				parameter<s>       Impedance2Links    := 0[s];
				parameter<s>       Impedance3Links    := 2[s];
				parameter<s>       Impedance4Links    := 5[s];
				parameter<s>       Impedance_gt4Links := 6[s];

				attribute<uint32>  Start (LinkSet_Read)     := LinkSet_Read/NodeSet_fromRead/NrConnectedLinks[LinkSet_Read/F1];
				attribute<uint32>  End   (LinkSet_Read)     := LinkSet_Read/NodeSet_fromRead/NrConnectedLinks[LinkSet_Read/F2];
			
				attribute<s> impedance_Start (LinkSet_Read):=
					switch(
						 case(Start <= 2, Impedance2Links)
						,case(Start  = 3, Impedance3Links)
						,case(Start  = 4, Impedance4Links)
						,Impedance_gt4Links
					);
			
				attribute<s> impedance_End (LinkSet_Read):=
					switch(
						 case(End <= 2, Impedance2Links)
						,case(End  = 3, Impedance3Links)
						,case(End  = 4, Impedance4Links)
						,Impedance_gt4Links
					);
			}
  		}
		
		container CreateMoreEfficientNetwork
		{
			unit<uint8> Iter := range(uint8, 0[uint8], ModelParameters/NumberOfItersForNetworkCleanUp)
			{
				attribute<string> name := 'Iter_'+string(id(.));
				attribute<string> prevname := MakeDefined(name[sub_or_null(ID(.),1b)], 'Start');
				attribute<string> Label := name, DialogType = "LabelText";
				attribute<uint32> nrofarc_na_iter := ='union_data(., '+AsList('OptimiseNetwork/'+name+'/IntermediateLinkSet/count_arcs', ',')+')'; 
			}
			
			unit<uint32> LinkSet_src     := CreateInitialWorkingNetwork/LinkSet_Read;
			unit<uint32> NodeSet_src     := CreateInitialWorkingNetwork/LinkSet_Read/NodeSet_fromRead;

			unit<uint64> Nodeset_x_NodeSet := combine_unit_uint64(NodeSet_src, NodeSet_src);
			
			container OptimiseNetwork := 
				for_each_ne(
					Iter/name
					, 'OptimiseNetwork_T('+quote(Iter/name)+')'
				)
			{
				container LastIter := =last(Iter/name);
			}
			unit<uint32> LastLinkSet  := OptimiseNetwork/LastIter/IntermediateLinkSet;
			
			// hardstore optimised network and nodeset
			unit<uint32> FinalNodeSet_Write := select_with_org_rel(pcount(LastLinkSet/F1)+pcount(LastLinkSet/F2) > 0),	StorageName = "= '%LocalDataProjDir%/'+Continent_name+'/Final_Nodeset_O-'+OrgName+'_D-'+Destname+'.fss'" 
			{
				attribute<WebMercator>        geometry                  := org_rel->values;
				attribute<.>                  OrgNode_rel  (OrgDomain)  := rlookup(OrgDomain/centroid_wm,  geometry);
				attribute<.>                  DestNode_rel (DestDomain) := rlookup(DestDomain/centroid_wm, geometry);	
			}
			unit<uint32> FinalLinkSet_Write := LastLinkSet,	StorageName = "= '%LocalDataProjDir%/'+Continent_name+'/Final_Linkset_O-'+OrgName+'_D-'+Destname+'.fss'" 
			{
				attribute<FinalNodeSet_Write> F1                   := invert(FinalNodeSet_Write/org_rel)[LastLinkSet/F1];
				attribute<FinalNodeSet_Write> F2                   := invert(FinalNodeSet_Write/org_rel)[LastLinkSet/F2];
				attribute<s_f>                Impedance            := LastLinkSet/Impedance;
				attribute<km>                 LengthKm             := LastLinkSet/LengthKm;
				attribute<bool>               IsOneDirection       := LastLinkSet/IsOneDirection;
				attribute<bool>               IsOD_connection_road := LastLinkSet/IsOD_connection_road;
			}
			
			// read stored nodeset and links
			unit<uint32> FinalNodeSet_Read : storagename = "= propvalue(FinalNodeSet_Write, 'StorageName')", StorageReadOnly = "True"
			{
				attribute<WebMercator>   geometry; 
				// attribute<WebMercator>   geometry_wm  := convert(point(PointCol(geometry), PointRow(geometry))[BaseProjection], WebMercator);
				attribute<.>             OrgNode_rel  (OrgDomain);
				attribute<.>             DestNode_rel (DestDomain);
			}
			unit<uint32> FinalLinkSet_Read : StorageName = "= propvalue(FinalLinkSet_Write, 'StorageName')", StorageReadOnly = "True"
			{
				attribute<FinalNodeSet_Read>      F1;
				attribute<FinalNodeSet_Read>      F2;
				attribute<s_f>                    Impedance;
				attribute<km>                     LengthKm;
				attribute<bool>                   IsOneDirection;
				attribute<bool>                   IsOD_connection_road;
				
				// For visualisation
				attribute<WebMercator>            FirstPoint                     := FinalNodeSet_Read/Geometry[F1];
				attribute<WebMercator>            LastPoint                      := FinalNodeSet_Read/Geometry[F2];
				attribute<WebMercator>            geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
				unit<uint32> PointSet := union_unit(.,.)
				{
					attribute<WebMercator>              Point   := Union_Data(., ../FirstPoint, ../LastPoint);
					attribute<..>                       SeqNr   := value(id(.) % nrofrows(..), ..);
					attribute<uint32>                   Ordinal := id(.) / nrofrows(..);
				}
				
				unit<uint32> Without_OD_connection_roads := select_with_attr_by_org_rel(.,!IsOD_connection_road);
			}
			
			Template OptimiseNetwork_T
			{
				parameter<string> IterName;
				///
				unit<uint32> PrevIntermediateLinkSet := =IterName != 'Iter_0' ? Iter/prevname[rlookup(IterName, Iter/name)]+'/IntermediateLinkSet' : 'LinkSet_src';
				
				unit<uint32> uq_OD_points := NetwerkSpec/uq_OD_points //fka UniqueLocations
				{
					attribute<NodeSet> Node_rel                    := rlookup(geometry_wm, NodeSet/geometry); // relation from the OD-points towards the nodeset. Should all be defined if there was no set limit for the connect which connected the OD-points to the network. 
					attribute<LinkSet> Link_rel                    := rlookup(Node_rel, LinkSet/F1); // the linkset is not constant over iters, so we need a new link_rel. Which is here the PrevIterlinkSet
					attribute<NodeSet> Node_rel_if_new_ODlink      := Link_rel -> F2; // the node id of the node that is on the existing network that connects an OD-point to the network
					attribute<NodeSet> Node_rel_of_link_to_network := !(link_rel -> IsOD_connection_road) ? Node_rel : Node_rel_if_new_ODlink; // check for the case where the OD-point is located exactly on an existing node.
				}
				
				unit<uint32> LinkSet := PrevIntermediateLinkSet
				{
					attribute<bool>                            IsOneDirection                 := PrevIntermediateLinkSet/IsOneDirection;
					
					attribute<bool>                            IsPartOfJunctionFreeSection    := NodeSet/WillBeDeleted[F1] || NodeSet/WillBeDeleted[F2];
					attribute<bool>                            IsInsideJunctionFreeSection    := NodeSet/WillBeDeleted[F1] && NodeSet/WillBeDeleted[F2];
					attribute<bool>                            IsOnBorderOfJunctionFreeSection:= IsPartOfJunctionFreeSection && !IsInsideJunctionFreeSection;
					attribute<bool>                            IsFinalLink                    := !IsPartOfJunctionFreeSection;
					// attribute<bool>                            JFS_unavailable                := (NodeSet/JFS_unavailable[F1] || NodeSet/JFS_unavailable[F2]) && IsPartOfJunctionFreeSection;
					// attribute<bool>                            IsFinalLink                    := !IsPartOfJunctionFreeSection || JFS_unavailable;
					
					// For visualisation
					//attribute<BaseProjection_ip>               geometry (arc)                 := PrevIntermediateLinkSet/geometry[BaseProjection_ip];
					attribute<WebMercator>                     geometry (arc)          := PrevIntermediateLinkSet/geometry;
				}
				
				unit<uint32> NodeSet  := NodeSet_src // set of all nodes in the network, comprised of the nodes from the original network AND the OD-points. 
				{
					attribute<uint32>                          NrConnectedLinks               := pcount(LinkSet/F1) + pcount(LinkSet/F2);
					attribute<bool>                            BordersWithOneDirectionalRoad  := LinkSet/IsOneDirection[invert(LinkSet/F1)] || LinkSet/IsOneDirection[invert(LinkSet/F2)];
					attribute<bool>                            WillBeDeleted                  := NrConnectedLinks == 2  // 2 connectinglinks means intermediary without junction
																									&& !IsOD_connection_road;
					attribute<bool>                            IsOD_connection_road           := pcount(uq_OD_points/Node_rel) != 0 // if there are node_rel's then it is an connected OD-point.
																									|| pcount(uq_OD_points/Node_rel_of_link_to_network) != 0; //if a node is used in the connection link between network and OD-point, then it is the connecting node

					//Forward relations
					// attribute<JunctionFreeSection_Check>       JunctionFreeSection_Check_rel  := ConnectedParts/JunctionFreeSection_Check_rel[ConnectedParts_rel];
					attribute<JunctionFreeSection>             JunctionFreeSection_rel        := ConnectedParts/JunctionFreeSection_rel[ConnectedParts_rel];
					// attribute<bool>                            JFS_unavailable                := ConnectedParts/JFS_unavailable[ConnectedParts_rel];
					attribute<ConnectedParts>                  ConnectedParts_rel             := ConnectedParts/PartNr;
					
					//attribute<bool>                            IsOrgDest_location             := IsDefined(rlookup(values, uq_OD_points/Values));
					attribute<bool>                            IsOrgDest_location             := IsDefined(invert(uq_OD_points/Node_rel));
					attribute<uint32>                          NrConnectedLinks_in_LinkSet_cleanedforJFS := pcount(LinkSet_cleanedforJFS/F1) + pcount(LinkSet_cleanedforJFS/F2);
					attribute<bool>                            IsDeadEnd_and_NotOD            := NrConnectedLinks_in_LinkSet_cleanedforJFS == 1 && !IsOrgDest_location;
					
					// For visualisation
					attribute<WebMercator>                     geometry                       := NodeSet_src/geometry;
				}

				unit<uint32> LinksInsideJunctionFreeSection := select(LinkSet/IsInsideJunctionFreeSection), Descr = "Those links that are in the junction free section"
				{
					attribute<s_f>                             impedance                      := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/impedance);
					attribute<km>                              LengthKm                       := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/LengthKm);
					attribute<NodeSet>                         F1                             := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/F1);
					attribute<NodeSet>                         F2                             := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/F2); 
					attribute<bool>                            IsOneDirection                 := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/IsOneDirection); 
					attribute<JunctionFreeSection>             JunctionFreeSection_rel        := NodeSet/JunctionFreeSection_rel[F1];
					
					//For visualisation
					attribute<WebMercator>                     geometry  (arc)                :=  collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/geometry);
				}
				
				// Check if nodes inside JFS are connected, thereby clustering JFS' together if they exist of more than one link. 
				unit<uint32> ConnectedParts := connected_parts(LinksInsideJunctionFreeSection/F1, LinksInsideJunctionFreeSection/F2)
				{
					attribute<NodeSet>                         FirstNode_rel                   := invert(PartNr);
					attribute<bool>                            IsJunctionFreeSection           := NodeSet/WillBeDeleted[FirstNode_rel];
					attribute<JunctionFreeSection>       JunctionFreeSection_rel   := recollect_by_cond(ConnectedParts/IsJunctionFreeSection, ID(JunctionFreeSection));
					// attribute<JunctionFreeSection_Check>       JunctionFreeSection_Check_rel   := recollect_by_cond(ConnectedParts/IsJunctionFreeSection, ID(JunctionFreeSection_Check));
					// attribute<JunctionFreeSection>             JunctionFreeSection_rel         := JunctionFreeSection_Check/JFS_rel[JunctionFreeSection_Check_rel];
					// attribute<bool>                            JFS_unavailable                 := IsDefined(JunctionFreeSection_Check_rel) && IsNull(JunctionFreeSection_rel);
				}
				
				unit<uint32> ConnectorLink := select_with_org_rel(LinkSet/IsOnBorderOfJunctionFreeSection)
				, Descr = "Those links that connect the unchanged links with the junction free links"
				{
					attribute<NodeSet>                         F1                             := LinkSet/F1[org_rel];
					attribute<NodeSet>                         F2                             := LinkSet/F2[org_rel]; 
					attribute<bool>                            is_F1_deleted                  := NodeSet/WillBeDeleted[F1];
					attribute<bool>                            is_only_one_delete             := NodeSet/WillBeDeleted[F1] != NodeSet/WillBeDeleted[F2];
					attribute<NodeSet>                         F_keep                         := is_F1_deleted ? F2 : F1; // Unchanged Node
					attribute<NodeSet>                         F_delete                       := is_F1_deleted ? F1 : F2; // Node in JunctionFreeSection
					attribute<JunctionFreeSection>       JunctionFreeSection_rel  := NodeSet/JunctionFreeSection_rel[F_delete];
					// attribute<JunctionFreeSection_Check>       JunctionFreeSection_Check_rel  := NodeSet/JunctionFreeSection_Check_rel[F_delete];
					// attribute<JunctionFreeSection>             JunctionFreeSection_rel        := JunctionFreeSection_Check/JFS_rel[JunctionFreeSection_Check_rel];
					attribute<NodeSet>                         NodeSet_rel                    := F_keep;
					attribute<s_f>                             Impedance                      := LinkSet/Impedance[org_rel];
					attribute<km>                              LengthKm                       := LinkSet/LengthKm[org_rel];
					attribute<bool>                            IsOneDirection                 := LinkSet/IsOneDirection[org_rel];
					
					//For visualisation
					attribute<WebMercator>                     geometry  (arc)                := LinkSet/geometry[org_rel];
				}

				// first test for empty junctionfreesections (reason unknown)
				// unit<uint32> JunctionFreeSection_Check:= select(ConnectedParts/IsJunctionFreeSection)
				// {
					// attribute<uint8>                           Connector_count                := pcount_uint8(ConnectorLink/JunctionFreeSection_Check_rel);
					// attribute<JunctionFreeSection>             JFS_rel                        := invert(JunctionFreeSection/org_rel);
				// }
				
				// unit<uint32> JunctionFreeSection := select_with_org_rel(JunctionFreeSection_Check/Connector_count > 0b)
				// , Descr = "Those nodes that are redundant, because there are no junctions on the links"
				// {
				unit<uint32> JunctionFreeSection := select_with_org_rel(ConnectedParts/IsJunctionFreeSection)
				{
					attribute<ConnectorLink>                   First_ConnectorLink_rel        := first(id(ConnectorLink), ConnectorLink/JunctionFreeSection_rel); //todo sneller
					attribute<ConnectorLink>                   Last_ConnectorLink_rel         := last(id(ConnectorLink), ConnectorLink/JunctionFreeSection_rel); //todo sneller
					attribute<bool>                            IsDisconnected                 := First_ConnectorLink_rel > Last_ConnectorLink_rel;
					
					attribute<s_f>                             Aggregated_Impedence           := sum(LinksInsideJunctionFreeSection/impedance, LinksInsideJunctionFreeSection/JunctionFreeSection_rel);
					attribute<s_f>                             First_ConnectorLink_Impedance  := ConnectorLink/Impedance[First_ConnectorLink_rel];
					attribute<s_f>                             Last_ConnectorLink_Impedance   := ConnectorLink/Impedance[Last_ConnectorLink_rel];
					attribute<s_f>                             Total_Impedance                := Aggregated_Impedence + First_ConnectorLink_Impedance + Last_ConnectorLink_Impedance;
					
					attribute<km>                              Aggregated_LengthKm            := sum(LinksInsideJunctionFreeSection/LengthKm, LinksInsideJunctionFreeSection/JunctionFreeSection_rel);
					attribute<km>                              First_ConnectorLink_LengthKm   := ConnectorLink/LengthKm[First_ConnectorLink_rel];
					attribute<km>                              Last_ConnectorLink_LengthKm    := ConnectorLink/LengthKm[Last_ConnectorLink_rel];
					attribute<km>                              Total_LengthKm                 := Aggregated_LengthKm + First_ConnectorLink_LengthKm + Last_ConnectorLink_LengthKm;
					
					attribute<NodeSet>                         Fa                             := ConnectorLink/NodeSet_rel[First_ConnectorLink_rel];
					attribute<NodeSet>                         Fb                             := ConnectorLink/NodeSet_rel[Last_ConnectorLink_rel];  
					
					attribute<NodeSet>                         F1                             :=  First_ConnectorLink_rel -> F1 == Fa ? Fa : Fb;
					attribute<NodeSet>                         F2                             :=  First_ConnectorLink_rel -> F1 == Fa ? Fb : Fa;
					
					attribute<bool>                            First_ConnectorLink_IsOneDirection := ConnectorLink/IsOneDirection[First_ConnectorLink_rel];
					attribute<bool>                            Last_ConnectorLink_IsOneDirection  := ConnectorLink/IsOneDirection[Last_ConnectorLink_rel];
					attribute<bool>                            Links_InsideJFS_IsOneDirection     := all(LinksInsideJunctionFreeSection/IsOneDirection, LinksInsideJunctionFreeSection/JunctionFreeSection_rel);
					
					attribute<bool>                            IsOneDirection                     := First_ConnectorLink_IsOneDirection && Last_ConnectorLink_IsOneDirection && Links_InsideJFS_IsOneDirection;
					attribute<bool>                            IsOD_connection_road               := const(FALSE,.);
					
					//For visualisation
					attribute<WebMercator>                     FirstPoint                     := NodeSet/Geometry[F1];
					attribute<WebMercator>                     LastPoint                      := NodeSet/Geometry[F2];
					attribute<WebMercator>                     geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
					unit<uint32> PointSet := union_unit(.,.)
					{
						attribute<WebMercator>                 Point   := Union_Data(., ../FirstPoint, ../LastPoint);
						attribute<..>                          SeqNr   := value(id(.) % nrofrows(..), ..);
						attribute<uint32>                      Ordinal := id(.) / nrofrows(..);
					}
				}
				unit<uint32> DisconnectedJunctionFreeSection := select_with_attr_by_cond(JunctionFreeSection, JunctionFreeSection/IsDisconnected);
				
				unit<uint32> UnchangedLinkSet := select_with_org_rel(LinkSet/IsFinalLink) //todo sneller zonder org_rel
				, Descr = "Those links that can be used without changes, i.e. no nodes need to be removed"
				{
					attribute<NodeSet>                         F1                             := LinkSet/F1[org_rel];
					attribute<NodeSet>                         F2                             := LinkSet/F2[org_rel];
					attribute<s_f>                             impedance                      := LinkSet/impedance[org_rel];
					attribute<km>                              LengthKm                       := LinkSet/LengthKm[org_rel];
					attribute<bool>                            IsOneDirection                 := LinkSet/IsOneDirection[org_rel];
					attribute<bool>                            IsOD_connection_road           := LinkSet/IsOD_connection_road[org_rel];
					
					//For visualisation
					attribute<WebMercator>                     FirstPoint                     := NodeSet/geometry[F1];
					attribute<WebMercator>                     LastPoint                      := NodeSet/geometry[F2];
					attribute<WebMercator>                     geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
					unit<uint32> PointSet := union_unit(.,.)
					{
						attribute<WebMercator>                 Point   := Union_Data(., ../FirstPoint, ../LastPoint);
						attribute<..>                          SeqNr   := value(id(.) % nrofrows(..), ..);
						attribute<uint32>                      Ordinal := id(.) / nrofrows(..);
					}
				}
				
				unit<uint32> LinkSet_cleanedforJFS := union_unit(UnchangedLinkSet, JunctionFreeSection)
				, Descr = "The final link set"
				{
					attribute<NodeSet>                         F1                             := union_data(., UnchangedLinkSet/F1, JunctionFreeSection/F1);
					attribute<NodeSet>                         F2                             := union_data(., UnchangedLinkSet/F2, JunctionFreeSection/F2);
					attribute<s_f>                             impedance_org                  := union_data(., UnchangedLinkSet/impedance, JunctionFreeSection/Total_Impedance);
					attribute<s_f>                             impedance                      := !IsOneDirection ? MakeDefined(Find_DuplicateLinks/min_impedance[Find_DuplicateLinks_rel],impedance_org) : impedance_org;

					attribute<km>                              LengthKm_org                   := union_data(., UnchangedLinkSet/LengthKm, JunctionFreeSection/Total_LengthKm);
					attribute<km>                              LengthKm                       := MakeDefined(Find_DuplicateLinks/min_length_km[Find_DuplicateLinks_rel],LengthKm_org);
					attribute<bool>                            IsOneDirection                 := union_data(., UnchangedLinkSet/IsOneDirection, JunctionFreeSection/IsOneDirection);
					
					attribute<bool>                            IsLinkWithDeadEnd              := NodeSet/IsDeadEnd_and_NotOD[F1] || NodeSet/IsDeadEnd_and_NotOD[F2];
					attribute<bool>                            IsLinkConnectedWithItself      := F1 == F2;
					attribute<bool>                            IsDuplicateLink                := Find_DuplicateLinks/IsDuplicateLink[Find_DuplicateLinks_rel] && id(.) != Find_DuplicateLinks/FirstLink[Find_DuplicateLinks_rel];
					
					attribute<bool>                            ToBeOmitted                    := (IsLinkWithDeadEnd || IsLinkConnectedWithItself || IsDuplicateLink) && !IsOneDirection;
					attribute<bool>                            IsOD_connection_road           := union_data(., UnchangedLinkSet/IsOD_connection_road, JunctionFreeSection/IsOD_connection_road);
					
					attribute<Nodeset_x_NodeSet>               Nodeset_x_NodeSet_rel          := combine_data(Nodeset_x_NodeSet, min_elem(F1, F2), max_elem(F1,F2)); //TO DO let op direction
					attribute<Find_DuplicateLinks>             Find_DuplicateLinks_rel        := rlookup(Nodeset_x_NodeSet_rel, Find_DuplicateLinks/values);

					//After clean up, the reduced road could collapse into a road which is duplicate.
					// TO DO: these duplicates were duplicates without direction, with directions this is not necesarily a duplicate.
					unit<uint32> Find_DuplicateLinks := unique(Nodeset_x_NodeSet_rel)
					{
						attribute<uint32>                    count_occurence := pcount(Find_DuplicateLinks_rel);
						attribute<bool>                      IsDuplicateLink := count_occurence > 1;
						attribute<s_f>                       min_impedance   := min(../impedance_org, Find_DuplicateLinks_rel);
						attribute<km>                        min_length_km   := min(../LengthKm_org, Find_DuplicateLinks_rel);
						attribute<..>                        FirstLink       := first(id(..), Find_DuplicateLinks_rel);
					}
					
					//For visualisation
					attribute<WebMercator>                  FirstPoint                     := NodeSet/geometry[F1];
					attribute<WebMercator>                  LastPoint                      := NodeSet/geometry[F2];
					attribute<WebMercator>                  geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
					unit<uint32> PointSet := union_unit(.,.)
					{
						attribute<WebMercator>  Point   := Union_Data(., ../FirstPoint, ../LastPoint);
						attribute<..>           SeqNr   := value(id(.) % nrofrows(..), ..);
						attribute<uint32>       Ordinal := id(.) / nrofrows(..);
					}
				}
				
				// 2852039
				// 181569
				// 289436
				
				//Verwijder links naar dead ends (if F1 or F2 occurs only once in all F1/F2, and not being OD-location)
				unit<uint32> IntermediateLinkSet := select(!LinkSet_cleanedforJFS/ToBeOmitted)
				{
					attribute<NodeSet> F1 := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/F1);
					attribute<NodeSet> F2 := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/F2);
		
					attribute<s_f>     Impedance      := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/impedance);
					attribute<km>      LengthKm       := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/LengthKm);
					attribute<bool>    IsOneDirection := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/IsOneDirection);
					attribute<bool>    IsOD_connection_road       := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/IsOD_connection_road);
					
					parameter<uint32>  count_arcs := #.;
					
					//For visualisation
					unit<uint32> PointSet := union_unit(.,.);
					attribute<WebMercator> geometry (arc) := points2sequence(Union_Data(PointSet, NodeSet/geometry[F1], NodeSet/geometry[F2]), value(id(PointSet) %#IntermediateLinkSet, IntermediateLinkSet));
				}
			}
		}
 	}
	
	Template Check_Connectiveness_T
	{
		unit<uint32> LinkSet_domain;
		unit<uint32> NodeSet_domain;
		attribute<NodeSet_domain> F1(LinkSet_domain);
		attribute<NodeSet_domain> F2(LinkSet_domain);
		///
		
		unit<uint32> Networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		{
			attribute<uint32>   Nr_Nodes   := pcount(PartNr);
			parameter<Networks> Main       := max_index(Nr_Nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			attribute<bool>     IsConnected (NodeSet_domain) := PartNr == Main;
		}
		
		attribute<bool> IsVerbonden (LinkSet_domain) := Networks/IsConnected[F1] && Networks/IsConnected[F2];

		unit<uint32> NodesNotConnected := select_with_org_rel(!Networks/IsConnected)
		{
			attribute<WebMercator>        geometry := org_rel -> geometry;
		}
	}
	
	Template Check_Connectiveness_T_seldomain
	{
		unit<uint32>              LinkSet_domain;
		unit<uint32>              NodeSet_domain;
		attribute<NodeSet_domain> F1 (LinkSet_domain);
		attribute<NodeSet_domain> F2 (LinkSet_domain);
		unit<uint32>              seldomain;
		attribute<WGS84>          seldomain_geom (poly, seldomain);
		///
		
		attribute<seldomain>              seldomain_rel  (NodeSet_domain) := point_in_polygon(NodeSet_domain/geometry_LL, seldomain_geom);
		attribute<upoint>                 nps_comb       (NodeSet_domain) := point(Networks/PartNr, seldomain_rel);
		attribute<Networks_per_seldomain> nps_rel        (NodeSet_domain) := rlookup(nps_comb, Networks_per_seldomain/Values);
		
		unit<uint32> Networks_per_seldomain := unique(nps_comb) 
		{
			attribute<Networks>	 Network_rel             := pointrow(values)[Networks];
			attribute<seldomain> Seldomain_rel           := pointcol(values)[seldomain];
			attribute<uint32>    Nr_nodes_in_both        := pcount(nps_rel);
			attribute<uint32>    Nr_nodes_in_network     := Nr_nodes_in_both > 0 ? Networks/Nr_Nodes[Network_rel] : 0 / 0;
			attribute<bool>	     Main_in_seldomain       := id(.) = max_index(Nr_nodes_in_both, Seldomain_rel)[seldomain_rel];
			attribute<bool>	     Main_touching_seldomain := id(.) = max_index(Nr_nodes_in_network, Seldomain_rel)[seldomain_rel];
			attribute<bool>      Sel_crit                := Nr_nodes_in_both > 1000 || Main_touching_seldomain;
		}
		
		unit<uint32> Networks := connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		{
			attribute<uint32>   Nr_Nodes                                    := pcount(PartNr);
			attribute<uint32>   Nr_Seldomains                               := pcount(Networks_per_seldomain/Network_rel);
			parameter<Networks> Main                                        := max_index(Nr_Nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			attribute<Networks> Main_in_seldomain               (seldomain) := Networks_per_seldomain/Network_rel[max_index(Networks_per_seldomain/Nr_nodes_in_network, Networks_per_seldomain/Seldomain_rel)]; // uitgangspunt: neem het grootste netwerk met minstens een punt binnen de grenzen van een unit.
			attribute<bool>     SelCrit                                     := any(Networks_per_seldomain/Sel_crit, Networks_per_seldomain/Network_rel);
			attribute<uint32>   Nr_Nodes_Main_in_seldomain      (seldomain) := Nr_Nodes[Main_in_seldomain];
			attribute<bool>     IsConnected                (NodeSet_domain) := PartNr == Main;
			attribute<bool>     IsConnected_seldomain      (NodeSet_domain) := IsDefined(rlookup(PartNr, Main_in_seldomain));
		}
		
		attribute<bool>    IsVerbonden_single    (LinkSet_domain) := Networks/IsConnected[F1] && Networks/IsConnected[F2];
		attribute<bool>    IsVerbonden_seldomain (LinkSet_domain) := Networks/IsConnected_seldomain[F1] || Networks/IsConnected_seldomain[F2];
		attribute<bool>    IsVerbonden           (LinkSet_domain) := Networks/SelCrit[Networks/PartNr[F1]];
		 
		attribute<uint32>  NrParts               (LinkSet_domain) := Networks/Nr_Nodes[Networks/PartNr[F1]];

		unit<uint32> NodesNotConnected := select_with_org_rel(!Networks/IsConnected)
		{
			attribute<BaseProjection>        geometry := org_rel -> geometry;
		}
	}
	Template Check_Connectiveness_T_adhoc
	{
		unit<uint32>              LinkSet_domain;
		unit<uint32>              NodeSet_domain;
		attribute<NodeSet_domain> F1 (LinkSet_domain);
		attribute<NodeSet_domain> F2 (LinkSet_domain);
		///
		
		attribute<bool>                      IsVerbonden  (LinkSet_domain) := Networks/IsConnected[F1] && Networks/IsConnected[F2];
		unit<uint32> Networks:= connected_parts(LinkSet_domain/F1, LinkSet_domain/F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		{
			attribute<uint32>   Nr_Nodes   := pcount(PartNr);
			parameter<Networks> Main       := max_index(Nr_Nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			attribute<bool>     IsConnected   (NodeSet_domain) := PartNr == Main;
		}

		unit<uint32> NodesNotConnected := select_with_org_rel(!Networks/Isconnected)
		{
			// attribute<BaseProjection> geometry := org_rel -> values;
		}
	}
}


