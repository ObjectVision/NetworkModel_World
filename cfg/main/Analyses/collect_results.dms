container collect_results: using = "Units;Geometries;SourceData/RegionalUnits;Classifications;" {
	
	parameter<string> xx:= 'X_X_X_X';
	
	container catchment_areas {
		container m10:= get_catchment_areas(2, 0f);
		container m15:= get_catchment_areas(3, 0f);
		container m20:= get_catchment_areas(4, 0f);
		container m25:= get_catchment_areas(5, 0f);
		container m30:= get_catchment_areas(6, 0f);
		container m30_p50:= get_catchment_areas(6, 50000f);
		container m45:= get_catchment_areas(9, 0f);
		
		
	
	}
	
	Template get_catchment_areas {
	
		parameter<Centres_Thresholds> inThreshold;
		parameter<float32>	  minPop;
		parameter<bool>		  button:= true, explicitsuppliers = "loadfiles/combined_storage/all_catchments";
		parameter<string>	  catchment_def:= propvalue(., 'name');
		parameter<string> 	  pathbit:= '%LocalDataProjDir%/Settlement_Catchments/all_settlements_'+SourceData/Settlements/set+'/'+Centres_Thresholds/name[inThreshold]+'_pop'+string(minPop / 1000f);
		unit<uint32> all_countries:= countries {
			
			attribute<string> reference:= MakeDefined(pathbit+'/'+Continents/Name[continents_rel]+'/'+ZoneId+'.shp', xx); 
			attribute<bool>	results_available:= ='union_data(.,'+asitemlist('checkfiles/'+ZoneId)+')';
			
			container checkfiles:= for_each_nedv(ZoneId, 'strcount(ExistingFile(xx, reference['+string(id(all_countries))+']), xx) < 1', void, bool);
		
		}
		unit<uint32> countries_with_results:= subset(all_countries/results_available) {
			attribute<string> ZoneId:= all_countries/ZoneId[nr_orgentity];
			attribute<string> Continent:= Continents/Name[all_countries/continents_rel[Nr_OrgEntity]];
			attribute<string> filepath:= all_countries/reference[nr_orgentity];
		}
		container loadfiles:= for_each_ne(countries_with_results/Continent+'_'+countries_with_results/ZoneId, 'load_polygons('+quote(countries_with_results/filepath)+')') {
			container combined_storage {
				unit<uint32> all_catchments:= ='union_unit('+asitemlist(countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile')+')', storagename = "= pathbit+'/mozaik/all_ran.dbf'" {
					attribute<WorldMollweide> 	Geometry (poly):= ='union_data(.,'+asitemlist(countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Geometry')+')', storagename = "= pathbit+'/mozaik/all_ran.shp'";
					attribute<float32> 			pop:= ='union_data(.,'+asitemlist('float32('+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/pop)')+')';
					attribute<string>			Country:= ='union_data(.,'+asitemlist('const('+quote(countries_with_results/ZoneId)+', '+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile, string)')+')';
					attribute<uint32>			type:= makedefined(all_settlements/type[max_index(all_settlements/pop, all_settlements/ac_rel)], 0);
				}
				unit<uint32> all_settlements:= ='union_unit('+asitemlist('Create_Centres_Catchments/'+catchment_def+'/'+Continents/Name+'/SelectedSettlements')+')' {
					attribute<WorldMollweide> geometry:= ='union_data(., '+asitemlist('Create_Centres_Catchments/'+catchment_def+'/'+Continents/Name+'/SelectedSettlements/centroid_mw')+')';
					attribute<float32> 		  pop:= ='union_data(., '+asitemlist('Create_Centres_Catchments/'+catchment_def+'/'+Continents/Name+'/SelectedSettlements/pop')+')';
					attribute<uint32> 		  type:= ='union_data(., '+asitemlist('Create_Centres_Catchments/'+catchment_def+'/'+Continents/Name+'/SelectedSettlements/type')+')';
					attribute<all_catchments> ac_rel:= point_in_polygon(geometry, all_catchments/Geometry);
				}

				
			}
		}	
	}
	container functional_areas: using="Analyses/Functional_Rural_Areas;" {
		
		unit<uint32> variants:= Analyses/Functional_Rural_Areas/variants;
		
		container areas_per_variant:= for_each_ne(variants/LabelText, 'results_per_variant('+string(id(variants))+')');
		
		Template results_per_variant {
			parameter<variants> inVariant;
			parameter<string> inThreshold:= Analyses/thresholds/name[catchment_areas/inThreshold];
			
			parameter<string> 	  pathbit:= '%LocalDataProjDir%/Functional_Rural_Areas/Base_'+inThreshold+'/'+variants/LabelText[inVariant];
			unit<uint32> all_countries:= countries {
				
				attribute<string> reference:= MakeDefined(pathbit+'/'+Continents/Name[continents_rel]+'/'+ZoneId+'.shp', xx); 
				attribute<bool>	results_available:= ='union_data(.,'+asitemlist('checkfiles/'+ZoneId)+')';
				
				container checkfiles:= for_each_nedv(ZoneId, 'strcount(ExistingFile(xx, reference['+string(id(all_countries))+']), xx) < 1', void, bool);
			
			}
			unit<uint32> countries_with_results:= subset(all_countries/results_available) {
				attribute<string> ZoneId:= all_countries/ZoneId[nr_orgentity];
				attribute<string> Continent:= Continents/Name[all_countries/continents_rel[Nr_OrgEntity]];
				attribute<string> filepath:= all_countries/reference[nr_orgentity];
			}
			container loadfiles:= for_each_ne(countries_with_results/Continent+'_'+countries_with_results/ZoneId, 'load_polygons('+quote(countries_with_results/filepath)+')') {
				container combined_storage {
					unit<uint32> all_catchments:= ='union_unit('+asitemlist(countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile')+')', storagename = "= pathbit+'/mozaik/all_ran.dbf'" {
						attribute<WorldMollweide> 	Geometry (poly):= ='union_data(.,'+asitemlist(countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Geometry')+')', storagename = "= pathbit+'/mozaik/all_ran.shp'";
						attribute<float32> 			pop:= ='union_data(.,'+asitemlist('float32('+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/pop)')+')';
						attribute<string>			Country:= ='union_data(.,'+asitemlist('const('+quote(countries_with_results/ZoneId)+', '+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile, string)')+')';
						attribute<string>			Name:= ='union_data(.,'+asitemlist('('+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Name)')+')';
						attribute<uint32>			Def:= ='union_data(.,'+asitemlist('uint32('+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Def)')+')';
						attribute<uint32>			Iter:= ='union_data(.,'+asitemlist('uint32('+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Iter)')+')';
					}
				}
			}	
		}
	}
	container access_grids: using="Analyses/Accessibility;" {
		
		unit<uint32> basevars:= Analyses/Accessibility/variants;
		unit<uint32> variants:= union_unit(basevars, basevars) {
			attribute<string> LabelText:= filename + '_' + indicator;
			attribute<string> filename:= union_data(., basevars/label, basevars/label);
			attribute<string> indicator:= id(.) < #basevars ? 'td' : 'tt';
			attribute<bool>   storeresults:= ='union_data(., '+asitemlist('areas_per_variant/'+LabelText+'/loadfiles/combined_storage/store')+')';
		}
		
		// E:\LocalData\networkmodel_world\Settlement_Accessibility\SMOD_V1s6_opr_P2023_v1_2020\Africa\AGO\tt
		
		container areas_per_variant:= for_each_ne(variants/LabelText, 'results_per_variant('+string(id(variants))+')');
		
		Template results_per_variant {
			parameter<variants> inVariant;
			
			parameter<string> 	  pathbit:= '%LocalDataProjDir%/Settlement_Accessibility/'+SourceData/Settlements/set;
			unit<uint32> all_countries:= countries {
				
				attribute<string> reference:= MakeDefined(pathbit+'/'+Continents/Name[continents_rel]+'/'+ZoneId+'/'+variants/indicator[inVariant]+'/'+variants/filename[inVariant]+'.tif', xx); 
				attribute<bool>	results_available:= ='union_data(.,'+asitemlist('checkfiles/'+ZoneId)+')';
				
				container checkfiles:= for_each_nedv(ZoneId, 'strcount(ExistingFile(xx, reference['+string(id(all_countries))+']), xx) < 1', void, bool);
			
			}
			unit<uint32> countries_with_results:= subset(all_countries/results_available) {
				attribute<WorldMollweide> Geom (poly):= all_countries/Geometry_MW[Nr_OrgEntity];
				attribute<string> ZoneId:= all_countries/ZoneId[nr_orgentity];
				attribute<string> Continent:= Continents/Name[all_countries/continents_rel[Nr_OrgEntity]];
				attribute<string> filepath:= all_countries/reference[nr_orgentity];
			}
			container loadfiles:= for_each_ne(countries_with_results/Continent+'_'+countries_with_results/ZoneId, 'load_tiffs('+quote(countries_with_results/filepath)+')') {
				container combined_storage {
					//attribute<uint16>  cwr_rel (SourceData/population/big_raster):= poly2grid(countries_with_results/Geom, SourceData/population/big_raster)[uint16];
					attribute<uint16>  cwr_rel (SourceData/population/big_raster):= uint16(rlookup(SourceData/RegionalUnits/Sep_units/country_rel, countries_with_results/Nr_OrgEntity)[SourceData/population/big_raster/sep_unit_rel]);
					attribute<float32> mozaik_float32 (SourceData/population/big_raster):= ='raster_merge(cwr_rel, float32, '+asitemlist(countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/GridData')+')',
						storagename = "= pathbit+'/_mozaiks/'+variants/LabelText[inVariant]+'_float32.tif'";
					attribute<uint8> mozaik_uint8 (SourceData/population/big_raster):= ='raster_merge(cwr_rel, uint8, '+asitemlist(countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Data_uint8')+')',
						storagename = "= pathbit+'/_mozaiks/'+variants/LabelText[inVariant]+'_uint8.tif'";
					parameter<bool> store:= True, ExplicitSuppliers = "mozaik_uint8;";
				//	unit<uint32> all_catchments:= ='union_unit('+asitemlist(countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile')+')', storagename = "= pathbit+'/mozaik/all_ran.dbf'" {
				//		attribute<WorldMollweide> 	Geometry (poly):= ='union_data(.,'+asitemlist(countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Geometry')+')', storagename = "= pathbit+'/mozaik/all_ran.shp'";
				//		attribute<float32> 			pop:= ='union_data(.,'+asitemlist('float32('+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/pop)')+')';
				//		attribute<string>			Country:= ='union_data(.,'+asitemlist('const('+quote(countries_with_results/ZoneId)+', '+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile, string)')+')';
				//		attribute<string>			Name:= ='union_data(.,'+asitemlist('('+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Name)')+')';
				//		attribute<uint32>			Def:= ='union_data(.,'+asitemlist('uint32('+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Def)')+')';
				//		attribute<uint32>			Iter:= ='union_data(.,'+asitemlist('uint32('+countries_with_results/Continent+'_'+countries_with_results/ZoneId+'/inFile/Iter)')+')';
				//	}
				}
			}	
		}
	}
	Template load_polygons {
		parameter<string> inPath;
		unit<uint32> inFile: storagename = "= inPath", storagereadonly = "True", storagetype = "gdal.vect" {
			attribute<WorldMollweide> Geometry (poly);
		}
	}
	Template load_tiffs {
		parameter<string> inPath;
		unit<wpoint> inFile: storagename = "= inPath", storagereadonly = "True", storagetype = "gdal.grid", dialogdata = "WorldMollweide" {
			attribute<float32> GridData;
			attribute<uint8>   Data_uint8:= uint8(min_elem(GridData, 100f));
		}
	}

}
