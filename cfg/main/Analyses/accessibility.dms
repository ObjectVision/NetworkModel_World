container Accessibility: using = "Units;Geometries;SourceData/RegionalUnits;" {

	unit<uint32> variants: nrofrows = 6 {
		attribute<string> label: ['villages', 'towns', 'cities', 'loc_ctr', 'reg_ctr', 'nat_ctr'];
		attribute<string> def: ['uint32(SelectedSettlements/type) > 10', 'uint32(SelectedSettlements/type) > 22', 'uint32(SelectedSettlements/type) > 29', 'bool(SelectedSettlements/L_15min)', 'bool(SelectedSettlements/L_30min)','bool(SelectedSettlements/L_60min)'];
	}
	
	container Access_to_settlement_types:= 
		for_each_ne(
			Continents/Name 
			,'get_Settlement_Access_grids_T('+quote(Continents/label)+
				', Obtain_Settlement_Hierarchies/'+Continents/name+'/Hierarchies_ReadOnly'    //orgs
				', NetworkSetup/GridPoints_Per_Continent/'+Continents/name+'/select' 
				', NetworkSetup/GridPoints_Per_Continent/'+Continents/name+'/Countries' 
				', NetworkSetup/GridPoints_Per_Continent/'+Continents/name+'/sep_units' 
				', NetworkSetup/Per_Continent/'+Continents/Name+'/NetwerkSpec/CreateMoreEfficientNetwork'
			')'
		);
	
	
	
	
	Template get_Settlement_Access_grids_T
	{
		parameter<string>     Continent_name;
		unit<uint32>          inSettlements;
		unit<uint32>          inGrids;
		unit<uint32>          inCountries;
		unit<uint32>          in_sep_units;
		container             NetwerkSpec;
		
		unit<uint32> FinalLinkSet := NetwerkSpec/FinalLinkSet_Read;
		unit<uint32> FinalNodeSet := NetwerkSpec/FinalNodeSet_Read;
	
		unit<uint32> SelectedSettlements:= inSettlements
		{
			attribute<BaseProjection> Geometry    := inSettlements/point;
			attribute<string>         Label       := inSettlements/Label;
			attribute<WebMercator> 	  centroid_wm := convert(Geometry, WebMercator);
			attribute<WorldMollweide> centroid_mw := convert(Geometry, WorldMollweide);
			attribute<FinalNodeSet>   NodeId      := inSettlements/NodeId;
			attribute<float32>        Pop         := float32(inSettlements/Pop);
			attribute<inCountries> 	  Country_rel := point_in_polygon(Geometry, inCountries/Geometry_LL);
			// attribute<RelevantSettlements> rs_id  := point_in_polygon(Geometry, RelevantSettlements/Geometry);
		}
		
		attribute<BaseProjection>  inGrids_centroid_wgs    (inGrids) := inGrids/centroid;
		attribute<WebMercator>     inGrids_centroid_wm     (inGrids) := convert(inGrids_centroid_wgs, WebMercator);
		
		attribute<FinalNodeSet> Closest_node        (inGrids) := connect(FinalNodeSet/geometry, inGrids_centroid_wm);
		attribute<bool>         Close_enough        (inGrids) := dist(inGrids_centroid_wm, FinalNodeSet/geometry[Closest_node]) < 100d;
		attribute<FinalNodeSet> Dest_NodeId         (inGrids) := Close_enough ? Closest_node : const(0 / 0, inGrids, FinalNodeSet);
		
		unit<uint32> Unconnected_Grids:= select_with_org_rel(IsNull(Dest_NodeId))
		{
			attribute<WebMercator>      Geometry     := inGrids_centroid_wm[org_rel];
			attribute<BaseProjection>   geometry_LL  := inGrids/centroid[org_rel];
			attribute<inCountries>      Country_rel  := inGrids/Country_rel[org_rel];
			attribute<in_sep_units>     Sep_unit_rel := inGrids/sepunit_rel[org_rel];
			attribute<float32>          Pop          := inGrids/population[org_rel];
		}
		
		unit<uint32> Connected_Grids:= select_with_org_rel(IsDefined(Dest_NodeId)) 
		{
			attribute<WebMercator>      Geometry     := inGrids_centroid_wm[org_rel];
			attribute<BaseProjection>   geometry_LL  := inGrids/centroid[org_rel];
			attribute<FinalNodeSet>     NodeId       := Dest_NodeId[org_rel];
			attribute<float32>          Pop          := inGrids/population[org_rel];
			attribute<inCountries>      Country_rel  := inGrids/Country_rel[org_rel];
			attribute<in_sep_units>     Sep_unit_rel := inGrids/sepunit_rel[org_rel];
		}
		
		Container Analysis_per_country:= 
			for_each_ne(
				inCountries/ZoneId
				, 'Create_Access_grids_T('+string(id(inCountries))+')'
			);
		
		Template Create_Access_grids_T 
		{
			parameter<inCountries> inCountry;
			
			parameter<WorldMollweide> cntr_lb:= lower_bound(inCountries/Geometry_mw[inCountry]);			
			parameter<WorldMollweide> cntr_ub:= upper_bound(inCountries/Geometry_mw[inCountry]);
			parameter<WorldMollweide> gridsize:= GetProjectionFactor(SourceData/population/big_raster)[WorldMollweide];
			//parameter<WorldMollweide> startpoint:= point(pointrow(cntr_ub), pointcol(cntr_lb), WorldMollweide);
			parameter<WorldMollweide> startpoint:= cntr_lb;
			parameter<ipoint> 		  cntr_rng_pt:= ((cntr_ub - cntr_lb) / gridsize)[ipoint] + point(1i, 1i, ipoint);
			
			unit<ipoint> country_grid:= range(gridset(WorldMollweide, gridsize, startpoint, ipoint), point(0i, 0i, ipoint), cntr_rng_pt) {
				attribute<int32> x:= pointcol(id(.));
				attribute<Collect_Results/all_grids> ag_rel:= invert(Collect_Results/all_grids/cg_rel);
				
			}
			
			
			unit<uint32> sep_Country_Units := select_with_org_rel(in_sep_units/country_rel = inCountry) 
			{
				attribute<BaseProjection>     geometry (poly)    := in_sep_units/Geometry[org_rel];
				attribute<string>             ZoneId             := in_sep_units/ZoneId[org_rel];
				attribute<bool>               any_connection     := pcount(Country_Connected_Grids/scu_rel) > 0;
				attribute<bool>				  any_grid	 		 := pcount(Country_Unconnected_Grids/scu_rel) > 0 || any_connection;
			}
			unit<uint32> Rel_sep_country_units := subset(sep_Country_Units/any_grid) {
				attribute<string>			 ZoneId:= sep_Country_Units/ZoneId[Nr_OrgEntity];
			}
			unit<uint32> Country_Unconnected_Grids := select_with_org_rel(Unconnected_Grids/country_rel = inCountry) 
			{
				attribute<WebMercator>        Geometry    := Unconnected_Grids/Geometry[org_rel];
				attribute<WorldMollweide>     Geometry_mw := (Unconnected_Grids/Geometry[org_rel])[WorldMollweide];
				attribute<BaseProjection>     geometry_LL := Unconnected_Grids/geometry_LL[org_rel];
				attribute<sep_Country_Units>  scu_rel     := rlookup(Unconnected_Grids/sep_unit_rel[org_rel], sep_Country_Units/org_rel);
				attribute<float32>            Pop         := Unconnected_Grids/Pop[org_rel];
				attribute<bool>               conn_scu    := sep_Country_Units/any_connection[scu_rel];
				//attribute<Country_Connected_Grids> 
			}
			
			unit<uint32> Country_Connected_Grids := select_with_org_rel(Connected_Grids/country_rel = inCountry) 
			{
				attribute<WebMercator>        Geometry    := Connected_Grids/Geometry[org_rel];
				attribute<WorldMollweide>     Geometry_mw := (Connected_Grids/Geometry[org_rel])[WorldMollweide];
				attribute<BaseProjection>     geometry_LL := Connected_Grids/geometry_LL[org_rel];
				attribute<sep_Country_Units>  scu_rel     := rlookup(Connected_Grids/sep_unit_rel[org_rel], sep_Country_Units/org_rel);
				attribute<float32>            Pop         := Connected_Grids/Pop[org_rel];
				attribute<FinalNodeSet>       NodeId      := Connected_Grids/NodeId[org_rel];
			}
			
			Container Accessibility_Per_Variant:= for_each_ne(variants/Label, 'Access_per_dest_variant_T('+string(id(variants))+')');
			
			
			//parameter<string> result_available:= strcount(ExistingFile('X_X_X_X',(filepath+'.shp')), 'X_X_X_X') < 1; 
		
			container Collect_Results := 
				for_each_ne(
					sep_Country_Units/ZoneId
					, (sep_Country_Units/any_connection ? 'Add_Unconnected_Grids__wconn_T(' : 'Add_Unconnected_Grids__noconn_T(')+string(id(sep_Country_Units))+')'
				) 
				{
					parameter<string> replace_line:= 'XXXX';
					parameter<string> exec_tt:= 'union_data(all_grids, Accessibility_Per_Variant/'+replace_line+'/Find_Only_Closest/tt_min, '+asitemlist(Rel_sep_country_units/ZoneId+'/tt_per_variant/'+replace_line)+')';
					parameter<string> exec_td:= 'union_data(all_grids, Accessibility_Per_Variant/'+replace_line+'/Find_Only_Closest/td_km, '+asitemlist(Rel_sep_country_units/ZoneId+'/td_per_variant/'+replace_line)+')';
					
					unit<uint32> all_grids:= ='union_unit(Country_Connected_Grids,'+asitemlist(Rel_sep_country_units/ZoneId+'/sepunit_unconnected_grids')+')' 
					{
						attribute<WebMercator>         geometry                 := ='union_data(., Country_Connected_Grids/Geometry, '+asitemlist(Rel_sep_country_units/ZoneId+'/sepunit_unconnected_grids/Geometry')+')';
						attribute<WorldMollweide>      geometry_mw              := Geometry[WorldMollweide];
						attribute<country_grid> 	   cg_rel                   := geometry_mw[country_grid];
						
						container tt_per_variant:= for_each_nedv(variants/label, replace(exec_tt, replace_line, variants/label), all_grids, min_f);
						container td_per_variant:= for_each_nedv(variants/label, replace(exec_td, replace_line, variants/label), all_grids, km);
						
					}
					
					parameter<string> filepath:= '%LocalDataProjDir%/Settlement_Accessibility/'+SourceData/Settlements/set+'/'+Continent_Name+'/'+inCountries/ZoneId[inCountry];
					
					container store_times:= for_each_nedva(const('t_',variants,string)+variants/label, 'float32(all_grids/tt_per_variant/'+variants/label+')[country_grid/ag_rel]', country_grid, float32,filepath+'/tt/'+variants/Label+'.tif');
					container store_distances:= for_each_nedva(const('d_',variants,string)+variants/label, 'float32(all_grids/td_per_variant/'+variants/label+')[country_grid/ag_rel]', country_grid, float32,filepath+'/td/'+variants/Label+'.tif');
				}
			
				parameter<bool> store_file:= true, ExplicitSuppliers = "Collect_Results/store_times;Collect_Results/store_distances;";
				
				
				unit<uint32> all_catchments_readonly 
				: StorageName = "= Collect_Results/filepath+'.shp'"
				, StorageType = "gdal.vect"
				, StorageReadOnly = "True" 
				{
					attribute<WorldMollweide>       Geometry;
				}
			}
		
		Template Access_per_dest_variant_T {
			parameter<variants> invariant;
			
			unit<uint32> Variant_Destinations:= ='select_with_org_rel('+variants/def[invariant]+' && SelectedSettlements/country_rel = inCountry)' {
				attribute<WebMercator> 	Geometry    := SelectedSettlements/centroid_wm[org_rel];
				attribute<string>       Label       := SelectedSettlements/Label[org_rel];
				attribute<float32>      Pop         := SelectedSettlements/Pop[org_rel];
				attribute<FinalNodeSet> NodeId      := SelectedSettlements/NodeId[org_rel];
				attribute<uint32>		type		:= SelectedSettlements/Type[org_rel];
			}
			
			container Find_Only_Closest 
			{
				attribute<s_f> Closest_TravelTime (FinalNodeSet) := 
					impedance_table(
						'bidirectional(link_flag);startPoint(Node_rel);node:TraceBack'
						, FinalLinkSet/impedance
						, FinalLinkSet/F1
						, FinalLinkSet/F2
						, !FinalLinkSet/IsOneDirection
						, Variant_Destinations/NodeId
					);
				attribute<km> Closest_TravelDistance (FinalNodeSet) := 
					impedance_table(
						'bidirectional(link_flag);startPoint(Node_rel);node:TraceBack'
						, FinalLinkSet/LengthKm
						, FinalLinkSet/F1
						, FinalLinkSet/F2
						, !FinalLinkSet/IsOneDirection
						, Variant_Destinations/NodeId
					);
				attribute<min_f> proto_tt_min (Country_Connected_Grids):= (Closest_TravelTime[Country_Connected_Grids/NodeId])[min_f];
				attribute<km> 	 proto_td_km  (Country_Connected_Grids):= (Closest_TravelDistance[Country_Connected_Grids/NodeId]);
				
				unit<uint32> with_values:= subset(isdefined(proto_tt_min)) {
					attribute<WebMercator> Geometry:= Country_Connected_Grids/Geometry[Nr_OrgEntity]; 
					attribute<min_f> tt_val:= proto_tt_min[Nr_OrgEntity];
					attribute<km> td_val:= proto_td_km[Nr_OrgEntity];
				}
				unit<uint32> without_values:= subset(isnull(proto_tt_min)) {
					attribute<WebMercator> Geometry:= Country_Connected_Grids/Geometry[Nr_OrgEntity]; 
					attribute<with_values> wi_rel:= connect(with_values/Geometry, Geometry);
					attribute<min_f> tt_val:= with_values/tt_val[wi_rel];
					attribute<km> 	 td_val:= with_values/td_val[wi_rel];
				}
				attribute<without_values> wv_rel (Country_Connected_Grids):= invert(without_values/Nr_OrgEntity);
				attribute<min_f> tt_min (Country_Connected_Grids):= #with_values > 0 ? makedefined(proto_tt_min, without_values/tt_val[wv_rel]) : 0d / 0d;
				attribute<km> td_km    (Country_Connected_Grids):= #with_values > 0 ? makedefined(proto_td_km, without_values/td_val[wv_rel]) : 0d / 0d;
			}
		}	
		
		Template Add_Unconnected_Grids__wconn_T 
		{
			parameter<sep_Country_Units> in_sep_unit_nr;
			
			unit<uint32> sepunit_unconnected_grids := select_with_org_rel(Country_Unconnected_Grids/scu_rel = in_sep_unit_nr) 
			{
				attribute<WebMercator> Geometry:= Country_Unconnected_Grids/Geometry[org_rel]; 
				attribute<sepunit_connected_grids> scg_rel:= connect(sepunit_connected_grids/Geometry, sepunit_unconnected_grids/Geometry);
				attribute<km>	 scg_dist:= convert(dist(Geometry, sepunit_connected_grids/Geometry[scg_rel])[m], km);
			}
			unit<uint32> sepunit_connected_grids   := select_with_org_rel(Country_Connected_Grids/scu_rel = in_sep_unit_nr) 
			{
				attribute<WebMercator>  Geometry  := Country_Connected_Grids/Geometry[org_rel]; 
				
				container tt_per_variant:= for_each_nedv(variants/label, 'Accessibility_Per_Variant/'+variants/label+'/Find_Only_Closest/tt_min[org_rel]', sepunit_connected_grids, min_f);
				container td_per_variant:= for_each_nedv(variants/label, 'Accessibility_Per_Variant/'+variants/label+'/Find_Only_Closest/td_km[org_rel]', sepunit_connected_grids, km);
			}
			
			container tt_per_variant:= for_each_nedv(variants/label, 'sepunit_connected_grids/tt_per_variant/'+variants/label+'[sepunit_unconnected_grids/scg_rel] + (sepunit_unconnected_grids/scg_dist / ModelParameters/Advanced/CarDefaultSpeed_low)[min_f]', sepunit_unconnected_grids, min_f);
			container td_per_variant:= for_each_nedv(variants/label, 'sepunit_connected_grids/td_per_variant/'+variants/label+'[sepunit_unconnected_grids/scg_rel] + sepunit_unconnected_grids/scg_dist', sepunit_unconnected_grids, km);
		}
		
		Template Add_Unconnected_Grids__noconn_T 
		{
			parameter<sep_Country_Units> in_sep_unit_nr;
			
			unit<uint32> sepunit_unconnected_grids:= select_with_org_rel(Country_Unconnected_Grids/scu_rel = in_sep_unit_nr) 
			{
				attribute<Geometries/WebMercator> 	Geometry:= Country_Unconnected_Grids/Geometry[org_rel]; 
				attribute<Country_Connected_Grids> 	ccg_rel:= connect(Country_Connected_Grids/Geometry, Geometry);
				attribute<km>	 					ccg_dist:= convert(dist(Geometry, Country_Connected_Grids/Geometry[ccg_rel])[m], km);
			}
			container tt_per_variant:= for_each_nedv(variants/label, 'Accessibility_Per_Variant/'+variants/label+'/Find_Only_Closest/tt_min[sepunit_unconnected_grids/ccg_rel] + (sepunit_unconnected_grids/ccg_dist / ModelParameters/Advanced/CarDefaultSpeed_low)[min_f]', sepunit_unconnected_grids, min_f);
			container td_per_variant:= for_each_nedv(variants/label, 'Accessibility_Per_Variant/'+variants/label+'/Find_Only_Closest/td_km[sepunit_unconnected_grids/ccg_rel] + (sepunit_unconnected_grids/ccg_dist)', sepunit_unconnected_grids, km);
		}
		
	}
	
	
	
	

}