container NetworkSetup : using = "units;geometries;SourceData;Classifications;SourceData/RegionalUnits;"
{	
	container Settlements_Per_Continent :=
		for_each_ne(
			Continents/name
			, 'selSettlements_Per_Continent_T(SourceData/Settlements/unioned_settlements,'+quote(Continents/name)+')'
		);
		
	container GridPoints_Per_Continent := 
		for_each_ne(
			Continents/name
			, 'selGridpoints_Per_Continent_T(SourceData/Population/LandCells,'+quote(Continents/name)+', SourceData/RegionalUnits/Countries)'
		);
		
	container Per_Continent :=
		for_each_ne(
			Continents/name
			,'Call_CreateNetwork_T(
				'+quote(Continents/label)+
				',Settlements_Per_Continent/'+Continents/name+'/Select'    //orgs
				',GridPoints_Per_Continent/'+Continents/name+'/Select'     //dests
				',GridPoints_Per_Continent/'+Continents/name+'/sep_units'  //dests
			')'
		);
	
	
	Template selGridpoints_Per_Continent_T
	{
		unit<uint64>      inUnit;
		parameter<string> Continent_name;
		unit<uint32>      inCountries;
		unit<uint32>	  inCountry_Sep_Units:= RegionalUnits/sep_units;
		//
		unit<uint64> Select_ui64 := ='select_with_attr_by_cond(inUnit,  inUnit/continent_rel == Continents/v/'+Continent_name+')';
		
		unit<uint32> Select:= range(uint32, 0, uint32(#Select_ui64)), dialogdata = "centroid", dialogtype = "map" 
		{
			attribute<ipoint>              org_rel         := ='collect_by_cond(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/org_rel)';
			attribute<WGS84>               centroid        := ='collect_by_cond(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/centroid)';
			// attribute<WebMercator>         centroid_wm     := convert(point(PointCol(centroid), PointRow(centroid))[WGS84], WebMercator);
			attribute<WebMercator>         centroid_wm     := convert(centroid, WebMercator);
			attribute<float32>             population      := ='collect_by_cond(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/population)[float32]';
			attribute<inCountry_Sep_Units> allsepunits_rel := ='collect_by_cond(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/Sep_unit_rel)';
			attribute<sep_units>           sepunit_rel     := rlookup(allsepunits_rel, sep_units/org_rel);
			attribute<Countries>           country_rel     := sep_units/country_rel[sepunit_rel];
			
			parameter<string> refname:= 'grids_1km';
		}
		unit<uint32> Countries := ='select_with_attr_by_cond(inCountries, inCountries/Continents_rel == Continents/v/'+Continent_name+')' 
		{
			attribute<string>       Label              := ='collect_by_cond(., inCountries/continents_rel == Continents/v/'+Continent_name+', inCountries/Label)';
			attribute<string>       ZoneId             := ='collect_by_cond(., inCountries/continents_rel == Continents/v/'+Continent_name+', inCountries/ZoneId)';
			attribute<WGS84>        Geometry_LL (poly) := ='collect_by_cond(., inCountries/continents_rel == Continents/v/'+Continent_name+', inCountries/Geometry_LL)';
			attribute<inCountries>  org_rel            := ='collect_by_cond(., inCountries/continents_rel == Continents/v/'+Continent_name+', id(inCountries))';
			attribute<WebMercator>  Geometry_WM (poly) := ='collect_by_cond(., inCountries/continents_rel == Continents/v/'+Continent_name+', inCountries/Geometry_WM)';
			attribute<WorldMollweide>  Geometry_MW (poly) := ='collect_by_cond(., inCountries/continents_rel == Continents/v/'+Continent_name+', inCountries/Geometry_MW)';
			
			unit<uint32> border_points_LL   := sequence2points(Geometry_LL) 
			{
				attribute<dpoint> points_x1000 := point[dpoint] * point_xy(1000d, 1000d, dpoint);
			}
			unit<uint32> border_points_WM   := sequence2points(Geometry_WM) 
			{
				attribute<dpoint> points_x100 := point[dpoint] * point_xy(100d, 100d, dpoint);
			}
			
			attribute<ipoint> iGeom_LL (poly)    := points2sequence_pso(border_points_LL/points_x1000, border_points_LL/sequence_rel, border_points_LL/ordinal)[ipoint];
			attribute<ipoint> iGeom_WM (poly)    := points2sequence_pso(border_points_WM/points_x100, border_points_WM/sequence_rel, border_points_WM/ordinal)[ipoint];
		}
		
		unit<uint32> sep_units:= ='select_with_attr_by_cond(inCountry_Sep_Units, inCountry_Sep_Units/Continents_rel == Continents/v/'+Continent_name+')' 
		{
			attribute<string>               ZoneId              := ='collect_by_cond(., inCountry_Sep_Units/continents_rel == Continents/v/'+Continent_name+', inCountry_Sep_Units/ZoneId)';
			attribute<WGS84>                Geometry (poly)     := ='collect_by_cond(., inCountry_Sep_Units/continents_rel == Continents/v/'+Continent_name+', inCountry_Sep_Units/Geometry_LL)';
			attribute<inCountries>          allcountries_rel    := ='collect_by_cond(., inCountry_Sep_Units/continents_rel == Continents/v/'+Continent_name+', inCountry_Sep_Units/country_rel)';
			attribute<Countries>            country_rel         := rlookup(allcountries_rel, Countries/org_rel);
			attribute<inCountry_Sep_Units>  org_rel             := ='collect_by_cond(., inCountry_Sep_Units/continents_rel == Continents/v/'+Continent_name+', id(inCountry_Sep_Units))';
		}
		
		unit<uint32> sep_units_WM := split_polygon(Countries/iGeom_WM) 
		{
			unit<uint32> border_points := sequence2points(geometry) 
			{
				attribute<WebMercator> points_div := (point[dpoint] / point_xy(100d, 100d, dpoint))[WebMercator];
			}
			attribute<WebMercator> geometry_WM (poly) := points2sequence_pso(border_points/points_div, border_points/sequence_rel, border_points/ordinal);
			attribute<Countries>   country_rel        := polygon_rel;
		}
		
		// establish islands here (make connections to right, right/bottom, bottom)
		//unit<uint32> 
		
			//collect_by_cond(sel_LandCells, big_raster/GridData >= 0d && IsDefined(big_raster/country_rel), big_raster/GridData)
	}
	
	Template selSettlements_Per_Continent_T
	{
		unit<uint32> inUnit;
		parameter<string> Continent_name;
		//
		unit<uint32> Select := ='select_with_attr_by_cond(inUnit,  inUnit/continent_rel == Continents/v/'+Continent_name+')', dialogdata = "geometry_LL", dialogtype = "map"  
		{
			attribute<WGS84>       geometry_LL (poly) := ='collect_by_cond(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/geometry_LL)';
			attribute<WGS84>       centroid           := ='collect_by_cond(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/centroid)';
			// attribute<WebMercator> centroid_wm        := convert(point(PointCol(centroid), PointRow(centroid))[WGS84], WebMercator);
			attribute<WebMercator> centroid_wm        := convert(centroid, WebMercator);
			attribute<float32>     population         := ='collect_by_cond(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/population)';
			attribute<string>      Label              := ='collect_by_cond(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/Label)';
			attribute<Countries>   country_rel        := point_in_polygon(centroid, Countries/Geometry);
			attribute<uint32>      type        		  := ='collect_by_cond(., inUnit/continent_rel == Continents/v/'+Continent_name+', inUnit/type)';
			
			parameter<string> refname:= 'all_settlements_'+inUnit/set;
			//collect_by_cond(sel_LandCells, big_raster/GridData >= 0d && IsDefined(big_raster/country_rel), big_raster/GridData)
		}
	}
	
	Template Call_CreateNetwork_T
	{
		parameter<string> Continent_name;
		unit<uint32>      Org;
		unit<uint32>      Dest;
		unit<uint32>	  RoadSelDomain;
		///
		unit<uint32>      RoadDomain_src := ='SourceData/Infrastructure/OSM/Per_Continent/'+Continent_name+'';
		
		parameter<string> OrgName:= Org/refname;
		parameter<string> DestName:= Dest/refname;
		
		
		container NetwerkSpec :=
			Templates/CreateNetwork_T(
				  org
				, dest
				, RoadDomain_src
			);
			
		parameter<bool> Store_Network1:= True, explicitsuppliers = "NetwerkSpec/CreateInitialWorkingNetwork/LinkSet_Write;";
		parameter<bool> Store_Network2:= True, explicitsuppliers = "NetwerkSpec/CreateMoreEfficientNetwork/FinalNodeSet_Write;NetwerkSpec/CreateMoreEfficientNetwork/FinalLinkSet_Write;";
		
	}
}
